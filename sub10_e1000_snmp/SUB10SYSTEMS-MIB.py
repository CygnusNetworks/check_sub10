# PySNMP SMI module. Autogenerated from smidump -f python SUB10SYSTEMS-MIB
# by libsmi2pysnmp-0.1.3 at Wed Mar 25 10:16:14 2015,
# Python version sys.version_info(major=2, minor=7, micro=9, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ModuleCompliance, NotificationGroup, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
( Bits, Counter32, Counter64, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "enterprises")
( DateAndTime, DisplayString, RowStatus, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "RowStatus", "TextualConvention")

# Types

class Sub10AlarmOperation(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(6,1,2,3,5,4,)
    namedValues = NamedValues(("lessThan", 1), ("greaterThan", 2), ("lessThanOrEqual", 3), ("greaterThanOrEqual", 4), ("equal", 5), ("notEqual", 6), )
    
class Sub10AlarmSeverity(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,4,3,)
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), )
    
class Sub10AlarmState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,0,)
    namedValues = NamedValues(("cleared", 0), ("raised", 1), )
    
class Sub10AlignmentMode(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,0,)
    namedValues = NamedValues(("modeNormal", 0), ("modeAlignment", 1), )
    
class Sub10DateTime(TextualConvention, OctetString):
    displayHint = "19a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(19,19)
    fixedLength = 19
    
class Sub10Duplex(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,3,1,)
    namedValues = NamedValues(("halfDuplex", 1), ("fullDuplex", 2), ("unknownDuplex", 3), )
    
class Sub10EntryStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("entryInUse", 1), ("entryNotInUse", 2), )
    
class Sub10FirmwareBank(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,3)
    
class Sub10MDIType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,3,2,)
    namedValues = NamedValues(("mdi", 1), ("mdix", 2), ("mdiUnknown", 3), )
    
class Sub10MWUType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,0,1,)
    namedValues = NamedValues(("mwuTypeNone", 0), ("mwuTypeVBand", 1), ("mwuTypeEBand", 2), )
    
class Sub10MacAddress(TextualConvention, OctetString):
    displayHint = "17a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(11,17)
    
class Sub10NTPSyncStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,1,)
    namedValues = NamedValues(("ntpOutOfSync", 0), ("ntpInSync", 1), )
    
class Sub10NotificationName(TextualConvention, OctetString):
    displayHint = "32a"
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(1,32)
    
class Sub10OperStatus(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(4,3,6,1,7,2,5,)
    namedValues = NamedValues(("opStatusUp", 1), ("opStatusDown", 2), ("opStatusTesting", 3), ("opStatusDormant", 4), ("opStatusNotPresent", 5), ("opStatusLowerLayerDown", 6), ("opStatusUnknown", 7), )
    
class Sub10QoSQueue(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,7)
    
class Sub10RadioDataRate(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,3,2,1,4,)
    namedValues = NamedValues(("radioDataRate1000", 0), ("radioDataRate700", 1), ("radioDataRate500", 2), ("radioDataRate300", 3), ("radioDataRate100", 4), )
    
class Sub10RadioLinkState(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,0,)
    namedValues = NamedValues(("radioLinkStateDown", 0), ("radioLinkStateAcquiring", 1), ("radioLinkStateUp", 2), )
    
class Sub10State(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,1,)
    namedValues = NamedValues(("stateDisabled", 0), ("stateEnabled", 1), )
    
class Sub10TerminalType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(0,1,)
    namedValues = NamedValues(("terminalA", 0), ("terminalB", 1), )
    
class Sub10TxPowerLimit(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(5,0,4,2,3,1,)
    namedValues = NamedValues(("txPowerLimitNone", 0), ("txPowerLimitMinus3", 1), ("txPowerLimitMinus6", 2), ("txPowerLimitMinus9", 3), ("txPowerLimitMinus12", 4), ("txPowerLimitMinus15", 5), )
    
class Sub10UnitType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,7,6,2,10,11,0,8,9,1,5,4,13,12,15,14,)
    namedValues = NamedValues(("baseband100A", 0), ("baseband100B", 1), ("v1000FCCA", 10), ("v1000FCCB2", 11), ("e1000ROWA", 12), ("e1000ROWB", 13), ("e1000FCCA", 14), ("e1000FCCB", 15), ("baseband1000A", 2), ("baseband1000B", 3), ("v100ROWA", 4), ("v100ROWB", 5), ("v100FCCA", 6), ("v100FCCB", 7), ("v1000ROWA", 8), ("v1000ROWB", 9), )
    
class Sub10VlanId(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,4095)
    
class Sub10VlanPriority(TextualConvention, Unsigned32):
    displayHint = "d"
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(0,7)
    
class Sub10VlanTagAction(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,2,0,1,)
    namedValues = NamedValues(("tagActionNone", 0), ("untag", 1), ("tag", 2), ("drop", 3), )
    

# Objects

sub10Systems = ModuleIdentity((1, 3, 6, 1, 4, 1, 39003)).setRevisions(("2014-11-19 00:00","2014-04-07 00:00",))
if mibBuilder.loadTexts: sub10Systems.setOrganization("Sub10 Systems Ltd")
if mibBuilder.loadTexts: sub10Systems.setContactInfo("support@sub10systems.com")
if mibBuilder.loadTexts: sub10Systems.setDescription("Sub10 Systems MIB")
sub10Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0))
sub10Unit = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3))
sub10UnitStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 1))
sub10UnitLocalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1))
sub10UnitLclTime = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 1), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclTime.setDescription("The local system time as a display string in the format:-\nYYYY-MM-DD,HH:MM:SS e.g. 2014-5-26,13:30:15")
sub10UnitLclUnitType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 2), Sub10UnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclUnitType.setDescription("Uniquely identifies the local unit product type")
sub10UnitLclDescription = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclDescription.setDescription("The description of the local unit.\nThis is synonymous with MIB-II sysDescr.")
sub10UnitLclHWSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclHWSerialNumber.setDescription("The hardware serial number of the Local Unit.\nThis also identifies whether the unit is a V-band or E-band product.\nSee sub10UnitLclMWUType.")
sub10UnitLclTerminalName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclTerminalName.setDescription("The administratively assigned name for the unit.\nThis is synonymous with MIB-II sysName and can be\nadministratively set via either sysName or sub10UnitMgmtTerminalName.")
sub10UnitLclTerminalType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 6), Sub10TerminalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclTerminalType.setDescription("Uniquely identifies the local terminal type A or B.")
sub10UnitLclLinkName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclLinkName.setDescription("The administratively assigned name for the radio link between\nthe local and remote units. This generally identifies geographically\nthe two ends or a radio link within a site or location.\nThis is synonymous with MIB-II sysLocation and can be\nadministratively set via either sysLocation or sub10UnitMgmtLinkName.")
sub10UnitLclLinkId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclLinkId.setDescription("The administratively assigned identifier for the radio link between\nthe local and remote units. The LinkId must be the same value on\nboth local and remote units.")
sub10UnitLclSiteName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclSiteName.setDescription("The administratively assigned physical location of the local unit.")
sub10UnitLclFirmwareLoadedBank = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 10), Sub10FirmwareBank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclFirmwareLoadedBank.setDescription("Currently loaded bank. The firmware version running in this bank is\ndefined by sub10UnitLclFirmwareVersion.")
sub10UnitLclFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclFirmwareVersion.setDescription("The firmware version currently running on the local unit.\nThis is by definition the firmware loaded into the bank\nnumber defined in sub10UnitLclFirmwareLoadedBank.")
sub10UnitLclIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclIpAddress.setDescription("The IP address of the local ethernet interface.")
sub10UnitLclMWUTemperature = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclMWUTemperature.setDescription("The modem temperature on the local unit in degrees celsius.")
sub10UnitLclNTPSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 14), Sub10NTPSyncStatus().clone('ntpOutOfSync')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclNTPSyncStatus.setDescription("The indication that the systems clock is synchronised with the\nNTP server.")
sub10UnitLclAlarmStateTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 15))
if mibBuilder.loadTexts: sub10UnitLclAlarmStateTable.setDescription("The table listing the each active alarm the local unit.\nAn active alarm is where the alarm state is 'raised' at the\nspecific severity level.\n\nThe entries in the table correspond to the configured entries in\nsub10UnitMgmtAlarmTable.\n\nThis table has a single entry per alarm where the index to the table is\nthe same index as the associated Alarm configuration\ntable sub10UnitMgmtAlarmTable.")
sub10UnitLclAlarmStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 15, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitLclAlarmStateIndex"))
if mibBuilder.loadTexts: sub10UnitLclAlarmStateEntry.setDescription("An entry (row) in the sub10UnitLclAlarmStateTable.")
sub10UnitLclAlarmStateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10UnitLclAlarmStateIndex.setDescription("The sub10UnitLclAlarmStateTable index.\nThe index represents the same index as used in sub10UnitMgmtAlarmTable.\nThe entries in the table correspond to the configured entries in\nsub10UnitMgmtAlarmTable.")
sub10UnitLclAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 15, 1, 2), Sub10AlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclAlarmState.setDescription("Internal object to indicate if this alarm is currently in the\nraised or cleared state.")
sub10UnitLclAlarmStateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 15, 1, 3), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclAlarmStateTime.setDescription("The local date and time when the last Alarm State\ntransition occurred.\n\nThis object facilitates retrieving all instances of\nalarms that have been raised or have changed state\nsince a given point in time.\n\nImplementations MUST include the offset from UTC,\nif available.  Implementation in environments in which\nthe UTC offset is not available is NOT RECOMMENDED.")
sub10UnitLclRadioDataRate = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 16), Sub10RadioDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclRadioDataRate.setDescription("The maximum data rate of the Airside interface. This has the same\nvalue as sub10RadioLclDataRate.")
sub10UnitLclMWUType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 17), Sub10MWUType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclMWUType.setDescription("The local MWU type")
sub10UnitLclFPGAVersion = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitLclFPGAVersion.setDescription("The FPGA Version.")
sub10UnitRemoteStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2))
sub10UnitRmtUnitType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 1), Sub10UnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtUnitType.setDescription("Uniquely identifies the remote unit product type")
sub10UnitRmtTime = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 2), Sub10DateTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtTime.setDescription("The remote unit local system time as a display string in the format:-\nYYYY-MM-DD,HH:MM:SS e.g. 2014-5-26,13:30:15")
sub10UnitRmtTerminalName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtTerminalName.setDescription("The administratively assigned name for the remote unit.\nThis is synonymous with MIB-II sysName.")
sub10UnitRmtTerminalType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 4), Sub10TerminalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtTerminalType.setDescription("Uniquely identifies the remote terminal type A or B.")
sub10UnitRmtLinkName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtLinkName.setDescription("The administratively assigned name on the remote unit for the radio link between\nthe local and remote units. This generally identifies geographically\nthe two ends or a radio link within a site or location.")
sub10UnitRmtLinkId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtLinkId.setDescription("The administratively assigned identifier on the remote unit for the radio link between\nthe local and remote units. The LinkId must be the same value on\nboth local and remote units.")
sub10UnitRmtHWSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtHWSerialNumber.setDescription("The hardware serial number of the Remote Unit.\nThis also identifies whether the unit is a V-band or E-band product.")
sub10UnitRmtFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtFirmwareVersion.setDescription("The firmware version currently running on the remote unit.\nThis is by definition the firmware loaded into the bank\ncurrently used for boot. See sub10UnitMgmtFirmware.")
sub10UnitRmtIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtIpAddress.setDescription("The IP address of the remote ethernet interface.")
sub10UnitRmtMWUTemperature = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitRmtMWUTemperature.setDescription("The modem temperature on the local unit in degrees celsius.")
sub10UnitMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2))
sub10UnitMgmtSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1))
sub10UnitMgmtTerminalName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTerminalName.setDescription("The administratively assigned name for the unit.\nThis is synonymous with MIB-II sysName and sub10UnitLocalStatus\nsub10UnitLclTerminalName.")
sub10UnitMgmtLinkName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtLinkName.setDescription("The administratively assigned name for the radio link between\nthe local and remote units. This generally identifies geographically\nthe two ends or a radio link within a site or location. This is\nsynonymous with sub10UnitLocalStatus sub10UnitLclLinkName")
sub10UnitMgmtLinkId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtLinkId.setDescription("The administratively assigned identifier for the radio link between\nthe local and remote units. The LinkId must be the same value on\nboth local and remote units. This is synonymous with sub10UnitLocalStatus\nsub10UnitLclLinkId.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtSiteName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSiteName.setDescription("The administratively assigned physical location of the unit.\nThis is synonymous with MIB-II sysLocation and sub10UnitLocalStatus\nsub10UnitLclSiteName.")
sub10UnitMgmtContactName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 1, 5), DisplayString().clone('support@sub10systems.com')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtContactName.setDescription("The administratively assigned contact for support of the unit.\nThis is synonymous with MIB-II sysContact and sub10UnitLocalStatus\nsub10UnitLclContactName.")
sub10UnitMgmtIp = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2))
sub10UnitMgmtIpMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,2,1,)).subtype(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2), ("dhcp", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtIpMode.setDescription("IP Address configuration is either manually set as ipv4 or ipv6\ntype addreessing or alternatively can be dynamically assigned\nautomatically using the Dynamic Host Control Protocol (DHCP).\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15)).clone('192.168.0.22')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtIpAddress.setDescription("The administratively assigned IP Address for the management\nchannel. This is reflected in the MIB-II ipAddrTable.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtIpSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15)).clone('255.255.255.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtIpSubnetMask.setDescription("The administratively assigned sub-net mask for the management\nchannel. This is reflected in the MIB-II ipAddrTable.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtIpDefGateway = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15)).clone('192.168.0.1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtIpDefGateway.setDescription("The administratively assigned default gateway for the management\nchannel.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtIpDHCP = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 2, 5), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtIpDHCP.setDescription("Dynamic Host Control Protocol (DHCP) is enabled or disabled.\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3))
sub10UnitMgmtVlanState = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3, 1), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtVlanState.setDescription("Enable VLAN for Management traffic.           .")
sub10UnitMgmtVlanId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3, 2), Sub10VlanId().clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtVlanId.setDescription("The VLAN Id used to carry management traffic. Only valid\nwhen the object is set to a non-zero value.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtVlanPriority.setDescription("The VLAN priority inserted into the ethernet frame for all\nmanagement traffic. Only valid when the object\nsub10UnitMgmtVlanId is set to non zero.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtVlanDSCP = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtVlanDSCP.setDescription("The Differentiated Services Code Point priority inserted\ninto the IP header of all management traffic.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtVlanDEI = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 3, 5), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtVlanDEI.setDescription("Set the Drop Eligible Indicator inserted into the ethernet frame for all\nmanagement traffic. Only valid when the object sub10UnitMgmtVlanId is set to non zero.\nThe DEI bit is set into the tag control information (TCI)\nfield of each management frame. The DEI is a 1 bit field immediately\nfollowing the PCP bits (3 bit field)\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4))
sub10UnitMgmtUsersNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtUsersNumber.setDescription("The number of valid sub10UnitMgmtUsersTable table entries present on this system.")
sub10UnitMgmtUserTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2))
if mibBuilder.loadTexts: sub10UnitMgmtUserTable.setDescription("The table listing the users configured on the unit.\nThe number of user entries is sub10UnitMgmtUsersNumber.\n\nThis table is indexed by user name (sub10UnitMgmtUserName).\nMultiple entries with the same sub10UnitMgmtUserName are not possible.\n\nNB. As part of SNMPv3 support this table will be superceded by 'usmUserTable'.")
sub10UnitMgmtUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtUserIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtUserEntry.setDescription("An entry (row) in the sub10UnitMgmtUserTable.\nIf the rowStatus is set to notInService(2) then\nthe entry is not valid and no columnar objects are returned.\nUsage is as follows:\n\nactive(1)       - Entry is created and in use. Any attempt\nto set this value will first check for\nconsistent objects. If objects are found\nto be inconsistent then the entry will not\nbe created and an error will be returned.\n\nnotInService(2) - Entry is not created and not in use. Any attempt\nto set this value will result in the the entry\nremaining created but not accessible and not used.\n\nnotReady(3)     - Entry is created but has inconsistent objects, these\nmust be set to correct values before the object can\nbe set to active(1).\n\ncreateAndGo(4)  - Set this to create a new entry and attempt to make\nthe entry active(1). If the entry has inconsistent objects\nthen this will set the entry to notReady(3) and an error\nwill be returned.\n\ncreateAndWait(5)- Set this to create a new entry.\nThis will set rowStatus = notReady(3). Related\nobjects can then be set to consistent values\nbefore row_status can be set to active(1).\n\ndestroy(6)      - Set this to delete an entry.")
sub10UnitMgmtUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10UnitMgmtUserIndex.setDescription("The sub10UnitMgmtUserTable index.")
sub10UnitMgmtUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtUserRowStatus.setDescription("The row status of this row.\nAll table rows are fixed in size\nand as such do not require conceptual row\ncreation. Instead the RowStatus is set to\nactive(1) or notInService(2) which indicates\nthat the row is operationally in use or not.\nThe default value is notInService(2) meaning the\nentry is not used by default. To make\nthe entry valid this object must be set\nto enabled(1), createAndGo(4) or createAndWait(5).\nTo delete the row set this to destroy(6).")
sub10UnitMgmtUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtUserName.setDescription("The unique user name provided by the system administrator.")
sub10UnitMgmtUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,4,2,3,)).subtype(namedValues=NamedValues(("operation", 1), ("administration", 2), ("maintenance", 3), ("engineer", 4), )).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtUserGroup.setDescription("The user group provided by the system administrator. This\nrestricts a user to certain key functions on the web GUI.")
sub10UnitMgmtUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtUserPassword.setDescription("The unique user password provided by the system administrator.\nThis object can be set but is not visible when read.")
sub10UnitMgmtUserPasswordVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 4, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtUserPasswordVerify.setDescription("The unique user password provided by the system administrator\nuse to verify the setting of sub10UnitMgmtUserPassword.\nThis object can be set but is not visible when read.")
sub10UnitMgmtTime = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5))
sub10UnitMgmtTimeLocal = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 1), Sub10DateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTimeLocal.setDescription("The administratively assigned system time defined\nas a display string in the format:-\n\nYYYY-MM-DD HH:MM:SS e.g. 2014-5-26 13:30:15")
sub10UnitMgmtTimeNTPEnabled = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 2), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPEnabled.setDescription("The administratively assigned state to enable or disable NTP.\nsystem cloack assignment automatically using the\nNetwork Time Protocol (NTP).")
sub10UnitMgmtTimeNTPServer1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPServer1.setDescription("The administratively assigned primary NTP Server name.")
sub10UnitMgmtTimeNTPServer2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPServer2.setDescription("The administratively assigned secondary NTP Server name to\nbe used when the primary server is not responding.")
sub10UnitMgmtTimeNTPPort = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)).clone(123)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPPort.setDescription("The administratively assigned NTP Port number name to\nbe used when contacting the NTP server.")
sub10UnitMgmtTimeNTPSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 6), Sub10NTPSyncStatus().clone('ntpOutOfSync')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtTimeNTPSyncStatus.setDescription("The indication that the systems clock is synchronised with the\nNTP server.")
sub10UnitMgmtDateTime = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 5, 7), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtDateTime.setDescription("The administratively assigned system defined\nas a standard date-time specification.\n\nfield  octets  contents                  range\n-----  ------  --------                  -----\n1      1-2   year*                     0..65536\n2       3    month                     1..12\n3       4    day                       1..31\n4       5    hour                      0..23\n5       6    minutes                   0..59\n6       7    seconds                   0..60\n(use 60 for leap-second)\n7       8    deci-seconds              0..9\n8       9    direction from UTC        '+' / '-'\n9      10    hours from UTC*           0..13\n10      11    minutes from UTC          0..59\n\n* Notes:\n- the value of year is in network-byte order\n- daylight saving time in New Zealand is +13\n\nFor example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be\ndisplayed as:\n\n1992-5-26,13:30:15.0,-4:0\n\nNote that if only local time is known, then timezone\ninformation (fields 8-10) is not present.")
sub10UnitMgmtAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6))
sub10UnitMgmtAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1))
if mibBuilder.loadTexts: sub10UnitMgmtAlarmTable.setDescription("This table is indexed by alarm index a number ranging from 1\nto the maximum number of entries in the alarm table.\nAlarm Name and and alarm severity are configurable allowing multiple\nentries for the same alarm to be raised at different severity levels\naccording to different threshold levels.\n\nThe alarm name must be one of the known alarms which the specific\nproduct supports. For a list of the alarm names please refer\nto the product specification.\n\nMultiple entries with the same sub10UnitMgmtAlarmName and\nsub10UnitMgmtAlarmSeverity combination are not possible.\n\nThis table allows configuration of threshold passing behavior,\nthreshold values for both raising and clearing the alarms and\nthe perceived severity. The alarm forwarding mechanisms can\nbe defined for example SNMP trap, syslog and SMTP.\n\nNo validation of thresholds across different entries of the table\ntherefore the administrator must ensure that thresholds are correctly\nset accordingly for the severity of each alarm. This is particularly\nimportant where a single alarm name is configured to be raised at\ndifferent severity levels.")
sub10UnitMgmtAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtAlarmEntry.setDescription("An entry (row) in the sub10UnitMgmtAlarmTable.\nIf the rowStatus is set to notInService(2) then\nthe entry is not valid and no columnar objects are returned.")
sub10UnitMgmtAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmIndex.setDescription("The sub10UnitMgmtAlarmTable index.")
sub10UnitMgmtAlarmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRowStatus.setDescription("The row status of this row.\nAll table rows are fixed in size\nand as such do not require conceptual row\ncreation. Instead the RowStatus is set to\nactive(1) or notInService(2) which indicates\nthat the row is operationally in use or not.\nThe default value is notInService(2) meaning the\nentry is not used by default. To make\nthe entry valid this object must be set\nto enabled(1), createAndGo(4) or createAndWait(5).\nTo delete the row set this to destroy(6).")
sub10UnitMgmtAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 3), Sub10NotificationName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmName.setDescription("The alarm name. This must be one of the known Sub10 Systems\nalarm names specific to the product being managed. For\nproduct type see sub10UnitLclType. The list of alarm names\nper product type can be found in the product user documentation.\nThis object has the same value as sub10UnitMgmtAlarmNameIndex.")
sub10UnitMgmtAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 4), Sub10AlarmSeverity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmSeverity.setDescription("The alarm severity. This is added to each alarm as a parameter.")
sub10UnitMgmtAlarmMeasObject = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmMeasObject.setDescription("The measured object. This is the object name of the\nobject in the MIB with which the alarm is associated and\nwhich the configured thresholds are compared with when\nderiving the state of the alarm.\n\nIt is not neccessary for all alarm measurement values to\nbe identified in the MIB since a single alarm may be dependant\non checks against entities or objects which are not present\nin the MIB and therefore do not have an associated OID.\n\nIn general where an alarm and its thresholds relate to the\nmonitoring of the value of a single MIB object then the OID of\nthat object will be defined here otherwise the value\nis set to empty string.")
sub10UnitMgmtAlarmMonitorIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmMonitorIntvl.setDescription("The interval in seconds when the measured object is to be read and compared with\nthe raise and clear thresholds. This is effectively the alarm monitoring interval.\nAn alarm cannot be raised or cleared quicker than the configured interval.\nPlease also see related sub10UnitMgmtAlarmRaiseIntvls and sub10UnitMgmtAlarmClearIntvls\nobjects which also affect when alarms are raised and cleared. This object\nshould be set appropriately for the measured object to be monitored (see\nsub10UnitMgmtAlarmRaiseMeasObject) and the resulting alarm to be raised and cleared\n(see sub10UnitMgmtAlarmName). This also affects the forwarding of alarms for example as\nSNMP notifications.\n\nHigher severity alarms may have a shorter interval than those at a lower severity.\nThe correct setting of sub10UnitMgmtAlarmMonitorIntvl and related objects\nsub10UnitMgmtAlarmRaiseIntvls and sub10UnitMgmtAlarmClearIntvls are important to avoid\npotential network loading caused by alarm storms.")
sub10UnitMgmtAlarmRaiseOper = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 7), Sub10AlarmOperation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRaiseOper.setDescription("Type of operation which determines when an alarm\nis to be raised.\n\nDefinition of each type is as follows:\n\nlt - Measured objects value is less than raise threshold\ngt - Measured objects value is greater than raise threshold\nle - Measured objects value is less than or equal to raise threshold\nge - Measured objects value is greater than or equal to raise threshold\neq - Measured objects value is equal to raise threshold\nneq - Measured objects value is not equal to raise threshold\n\nThe alarm operation defines how to apply the configured\nthresholds when raising the alarm. This defines\nwhether the alarm is raised when the measured object value\ncrosses the threshold from low to high or from high to low or\nif the measured value hits a certain value or not.\n\nExample:\n\nAlarm Name                Alarm Threshold Raise Operation\nHigh Temperature               70              gt\nLow Temperature               -30              le\n\nHigh Temperature Alarm is raised when the measured temperature\nis above 70 and Low Temperature raised when the measured temperature\nis lower than or equal to -30.")
sub10UnitMgmtAlarmRaiseThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRaiseThresh.setDescription("The threshold value which the measured object's value\ncrosses causes the alarm to be raised. The behaviour of a\nmeasured value and alarm threshold comparison is\ndefined by the object sub10UnitMgmtAlarmThreshType.")
sub10UnitMgmtAlarmClearOper = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 9), Sub10AlarmOperation()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmClearOper.setDescription("Type of operation which determines when an alarm\nis to be cleared.\n\nDefinition of each type is as follows:\n\nlt - Measured objects value is less than clear threshold\ngt - Measured objects value is greater than clear threshold\nle - Measured objects value is less than or equal to clear threshold\nge - Measured objects value is greater than or equal to clear threshold\neq - Measured objects value is equal to clear threshold\nneq - Measured objects value is not equal to clear threshold\n\nThe alarm operation defines how to apply the configured\nthresholds when clearing the alarm. This defines\nwhether the alarm is cleared when the measured object value\ncrosses the threshold from low to high or from high to low or\nif the measured value hits a certain value or not.\n\nExample:\n\nAlarm Name                Alarm Threshold Clear Operation\nHigh Temperature               60              le\nLow Temperature               -30              gt\n\nLow Temperature Alarm is cleared when the measured temperature\nis lower or equal to 60 and Low Temperature cleared when the\nmeasured temperature is greater than -30.")
sub10UnitMgmtAlarmClearThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(0)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmClearThresh.setDescription("The threshold value which the measured object's value\ncrosses causes the alarm to be cleared. The behaviour of a\nmeasured value and alarm threshold comparison is\ndefined by the object sub10UnitMgmtAlarmThreshType.\n\nThe sub10UnitMgmtAlarmClearThresh value may be different\nto the sub10UnitMgmtAlarmRaiseThresh allowing some hysteresis\nbewteen raising and clearing of alarms thus avoiding an alarm\nbeing continually raised and cleared if the measured value\nis changing frequently around the threshold.\nIf different raise and clear thresholds are not required then the\nsub10UnitMgmtAlarmClearThresh and sub10UnitMgmtAlarmRaiseThresh\nshould be set to the same value.")
sub10UnitMgmtAlarmRaiseIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmRaiseIntvls.setDescription("The number of continuous monitoring intervals (see sub10UnitMgmtAlarmMonitorIntvl)\nwhere the measured object has crossed the raise threshold before the\nalarm state is set to raised. This is intended to reduce the number of\nalarm state transitions when the measured object value\nis rapidly changing close to the configured raise threshold.")
sub10UnitMgmtAlarmClearIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmClearIntvls.setDescription("The number of continuous monitoring intervals (see sub10UnitMgmtAlarmMonitorIntvl)\nwhere the measured object has crossed the clear threshold before the\nalarm state is set to cleared. This is intended to reduce the number\nof alarm state transitions when the measured object value\nis rapidly changing close to the configured clear threshold.")
sub10UnitMgmtAlarmNotification = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 13), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,3,)).subtype(namedValues=NamedValues(("sub10NoAlarm", 0), ("sub10UnitAlarm", 1), ("sub10EthernetAlarm", 2), ("sub10RadioAlarm", 3), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmNotification.setDescription("The name of the SNMP notification (trap) used\nto inform management entities of the alarm.")
sub10UnitMgmtAlarmSmtpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmSmtpAddress.setDescription("The smtp mail address. If set the alarm\nis suitable formatted and sent to the given\nmail address.")
sub10UnitMgmtAlarmToSyslog = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 6, 1, 1, 15), Sub10State().clone('stateDisabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtAlarmToSyslog.setDescription("If set to 'enabled' the alarm is suitable formatted\nand sent to syslog.")
sub10UnitMgmtSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7))
sub10UnitMgmtSnmpAgent = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 1), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpAgent.setDescription("If set to 'enabled' the agent will respond to valid SNMP requests\nfor GET/SET/GET-NEXT of supported MIB objects.\n\n!! IMPORTANT !!\nIf this object is set to disabled then the Agent will no longer respond\nand therefore it will not be possible to re-enable the agent using\nSNMP. The agent can be re-enabled using the web GUI only.\n\nIf this object is disabled then traps will not be forwarded by the unit.")
sub10UnitMgmtSnmpTraps = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 2), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTraps.setDescription("If set to 'enabled' the agent will forward traps to all configured\ntrap destinations. If disabled traps are discarded.\nTraps are not sent if sub10UnitMgmtSnmpAgent is 'disabled(2)'\nregardless of the setting of this object.")
sub10UnitMgmtSnmpv320Mib = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 3), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpv320Mib.setDescription("If set to 'enabled' the agent will support the Sub10 Systems\nv320 legacy MIB (LIBERATOR-MIB) objects and traps.")
sub10UnitMgmtSnmpv3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 4), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpv3.setDescription("If set to 'enabled' the agent will support SNMPv3\nPDUs and the SNMPv3 MIBs. SNMPv1/2c PDUs will also be\nsupported in this mode.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtSnmpTrpDstTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5))
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstTable.setDescription("The table listing the each trap destination the local unit.\nEach trap destination has an IpAddress and a trap community string")
sub10UnitMgmtSnmpTrpDstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTrpDstIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstEntry.setDescription("An entry (row) in the sub10UnitMgmtSnmpTrpDstTable.\nIf the rowStatus is set to notInService(2) then the entry\nis not valid and no columnar objects are returned.")
sub10UnitMgmtSnmpTrpDstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstIndex.setDescription("The sub10UnitMgmtSnmpTrpDstTable index.\nIf the rowStatus is not set to enabled(1) then\nthe entry is not valid and no columnar objects are returned\nexcept for the rowStatus object itself.")
sub10UnitMgmtSnmpTrpDstRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstRowStatus.setDescription("The row status of this row.\nAll table rows are fixed in size\nand as such do not require conceptual row\ncreation. Instead the RowStatus is set to\nactive(1) or notInService(2) which indicates\nthat the row is operationally in use or not.\nThe default value is notInService(2) meaning the\nentry is not used by default. To make\nthe entry valid this object must be set\nto enabled(1), createAndGo(4) or createAndWait(5).\nTo delete the row set this to destroy(6).")
sub10UnitMgmtSnmpTrpDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstIpAddr.setDescription("The administratively assigned SNMP Trap Destination IP.")
sub10UnitMgmtSnmpTrpDstCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 7, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstCommunity.setDescription("The trap community name sent with each trap to this trap destination.\nThe trap community allows for some security in the target management terminal")
sub10UnitMgmtSmtp = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 8))
sub10UnitMgmtFirmware = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9))
sub10UnitMgmtFirmwareSelectBank = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 1), Sub10FirmwareBank()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareSelectBank.setDescription("Currently selected bank which unit uses to boot.")
sub10UnitMgmtFirmwareLoadedBank = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 2), Sub10FirmwareBank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareLoadedBank.setDescription("Currently loaded bank. The firmware version number running in this bank is\ndefined by sub10UnitMgmtFirmwareVersion.")
sub10UnitMgmtFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareVersion.setDescription("The firmware version currently running on the local unit.\nThis is the version of the firmware loaded into the bank\nnumber defined in sub10UnitMgmtFirmwareLoadedBank.")
sub10UnitMgmtFirmwareBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBootVersion.setDescription("The firmware boot version currently running on the local unit.\nThis is the boot version of the firmware loaded into the bank\nnumber defined in sub10UnitMgmtFirmwareLoadedBank.")
sub10UnitMgmtFirmwareAction = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(4,3,1,2,)).subtype(namedValues=NamedValues(("fmwNone", 1), ("fmwReboot", 2), ("fmwBankCopy", 3), ("fmwUpload", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareAction.setDescription("The firmware bank action object is used to perform certain\nactions on a firmware bank. Using this it is possible to reboot the\nunit, copy banks and upload software to the currently inactive bank.\n\nAfter a Set of this object it's value is always reset to bankActionNone(0).\n\nfmwReboot(1)  - Perform immediate unit reboot of the unit and start the\nfirmware currently loaded in 'sub10UnitMgmtFirmwareSelectBank'.\nfmwBankCopy(2)- Copy the loaded in 'sub10UnitMgmtFirmwareLoadedBank'\nto the inactive bank.\nfmwBankCopy(3)- Copy the loaded in 'sub10UnitMgmtFirmwareLoadedBank'\nto the inactive bank.")
sub10UnitMgmtFirmwareBankTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 6))
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankTable.setDescription("This tables contains information regarding the firmware banks.")
sub10UnitMgmtFirmwareBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 6, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareBankIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankEntry.setDescription("An entry (row) in the sub10UnitMgmtFirmwareBankTable.")
sub10UnitMgmtFirmwareBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 6, 1, 1), Sub10FirmwareBank()).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankIndex.setDescription("The sub10UnitMgmtFirmwareBankTable index.")
sub10UnitMgmtFirmwareBankVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankVersion.setDescription("The firmware version currently installed in this bank.")
sub10UnitMgmtFirmwareBankImage = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 9, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankImage.setDescription("The firmware image name currently installed in this bank.")
sub10UnitMgmtDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 10))
sub10UnitMgmtDNSTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 3, 2, 10, 1))
if mibBuilder.loadTexts: sub10UnitMgmtDNSTable.setDescription("This tables defines the Domain Name Servers.")
sub10UnitMgmtDNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 3, 2, 10, 1, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10UnitMgmtDNSIndex"))
if mibBuilder.loadTexts: sub10UnitMgmtDNSEntry.setDescription("An entry (row) in the sub10UnitMgmtDNSTable.")
sub10UnitMgmtDNSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 10, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10UnitMgmtDNSIndex.setDescription("The sub10UnitMgmtDNSTable index.")
sub10UnitMgmtDNServer = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 3, 2, 10, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtDNServer.setDescription("The administratively assigned DNS server IP for the unit.\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtEncryption = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 11))
sub10UnitMgmtEncryptMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 11, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(3,1,2,0,)).subtype(namedValues=NamedValues(("encryptNone", 0), ("encryptAES128", 1), ("encryptAES192", 2), ("encryptAES256", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtEncryptMode.setDescription("The administratively assigned License key for the unit.\nThe license key enables capabilities within the unit.\nThe capabilities currently available by the configured\nlicense key are readable objects.")
sub10UnitMgmtEncryptKey = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 11, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtEncryptKey.setDescription("The administratively assigned Encryption key.")
sub10UnitMgmtLicense = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 12))
sub10UnitMgmtLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 12, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtLicenseKey.setDescription("The administratively assigned License key for the unit.\nThe license key enables capabilities within the unit.\nThe capabilities currently available by the configured\nlicense key are readable objects.")
sub10UnitMgmtLicenseAES = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 12, 2), Sub10State().clone('stateDisabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10UnitMgmtLicenseAES.setDescription("Indication if AES encryption is included in the current license key.")
sub10UnitMgmtSyncE = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 13))
sub10UnitMgmtSyncEMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 13, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,2,)).subtype(namedValues=NamedValues(("syncENone", 0), ("syncEProvider", 1), ("syncEConsumer", 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtSyncEMode.setDescription("The SyncE Mode. Setting this to syncEProvider(1) configures the unit as\na Slave clock. In this case the unit at the other end of the\nlink should be set to syncEConsumer(2).\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10UnitMgmtActions = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20))
sub10UnitMgmtTransaction = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,3,2,)).subtype(namedValues=NamedValues(("transactionNone", 1), ("transactionCommit", 2), ("transactionRollback", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTransaction.setDescription("This is used to commit or rollback the setting of object configuration.\nIt only applies where the objects are subject to transactional requirements.\nFor example the setting of the Unit's IP Address requires that a transaction\nbe committed. If the transaction is not committed after a rollback timeout then\nthe unit will automatically action a rollback to the previous value.\n\nThe rollback timeout is configurable 'sub10UnitMgmtRollbackTimeout'")
sub10UnitMgmtTransactionStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,2,1,3,)).subtype(namedValues=NamedValues(("transStatusNone", 1), ("transStatusActive", 2), ("transStatusCommitted", 3), ("transStatusRollback", 4), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTransactionStatus.setDescription("This indicates either a transaction is currently in progress or\nif the last transaction was committed successfully or was rolled\nback.")
sub10UnitMgmtRollbackTimeout = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 300)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtRollbackTimeout.setDescription("The timeout in seconds after which uncommitted Sets\nwill be rolled back to their previous values.\nA rollback only affects those objects which are\nsubject to transactions.")
sub10UnitMgmtTransactionMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 4), Sub10State().clone('stateEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtTransactionMode.setDescription("Enables and Disables transactions. If sub10UnitMgmTransactionMode is\nstateDisabled(0) then no objects are subject to commit and rollback.")
sub10UnitMgmtResetAction = MibScalar((1, 3, 6, 1, 4, 1, 39003, 3, 2, 20, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,3,)).subtype(namedValues=NamedValues(("resetNone", 1), ("resetFactoryDefaults", 2), ("resetFactoryDefaultsNoSave", 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10UnitMgmtResetAction.setDescription("This is used to reset unit configuration.")
sub10Ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4))
sub10EthernetStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 1))
sub10EthernetLocalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1))
sub10EthLclLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 1), Sub10OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthLclLinkStatus.setDescription("The status of the ethernet link. Synonymous with interfaces OperState")
sub10EthLclMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 2), Sub10MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthLclMacAddress.setDescription("The MAC address of the local ethernet interface. Synonymous with interfaces ifPhysAddress")
sub10EthLclSpeed = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthLclSpeed.setDescription("The estimated speed of the local ethernet interface in bits per second. Synonymous with interfaces ifSpeed")
sub10EthLclDuplex = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 4), Sub10Duplex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthLclDuplex.setDescription("The duplex operation of the local ethernet interface")
sub10EthLclMDI = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 1, 1, 5), Sub10MDIType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthLclMDI.setDescription("The MDI/MDIX state of the local ethernet interface")
sub10EthernetRemoteStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2))
sub10EthRmtLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 1), Sub10OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthRmtLinkStatus.setDescription("The status of the remote ethernet interface. Synonymous but\nnot identical with interfaces OperState on the remote unit")
sub10EthRmtMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 2), Sub10MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthRmtMacAddress.setDescription("The MAC address of the remote ethernet interface. Synonymous\nwith interfaces ifPhysAddress on the remote unit.")
sub10EthRmtSpeed = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthRmtSpeed.setDescription("The estimated speed of the remote ethernet interface in\nbits per second. Synonymous with interfaces ifSpeed on the remote unit")
sub10EthRmtDuplex = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 4), Sub10Duplex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthRmtDuplex.setDescription("The duplex operation of the remote ethernet interface")
sub10EthRmtMDI = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 1, 2, 5), Sub10MDIType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthRmtMDI.setDescription("The MDI/MDIX state of the remote ethernet interface")
sub10EthernetMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 2))
sub10EthMgmtPhy = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1))
sub10EthMgmtPhyAutoNeg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1, 1), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtPhyAutoNeg.setDescription("Auto-negotiation of ethernet interface parameters.")
sub10EthMgmtPhySpeed = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtPhySpeed.setDescription("Speed of the ethernet interface in bits per second used\nonly when sub10UnitMgmtPhyAutoNeg=disabled.")
sub10EthMgmtPhyDuplex = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1, 3), Sub10Duplex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtPhyDuplex.setDescription("The duplex operation of the ethernet interface used\nonly when sub10UnitMgmtPhyAutoNeg=disabled.")
sub10EthMgmtPhyMDI = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 1, 4), Sub10MDIType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtPhyMDI.setDescription("The duplex operation of the ethernet interface used\nonly when sub10UnitMgmtPhyAutoNeg=disabled.")
sub10EthMgmtVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2))
sub10EthMgmtVlanFiltering = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 1), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanFiltering.setDescription("VLAN filtering on the ethernet interface.\nThis applies to user traffic only not management traffic however\nto enable VLAN filtering a Unit Management VLAN configuration\nmust be set. See sub10UnitMgmtVlan.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10EthMgmtVlanDefaultEnabled = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 2), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultEnabled.setDescription("Enable Default VLAN tagging and untagging on the ethernet interface.\nOnly valid when sub10EthMgmtVlanFiltering is enabled.\n\nDefault VAN tagging allows manipulation of untagged traffic ingressing\nthe interface by applying the specified Default VLAN Id, priority and\nDEI and manipulation of traffic egressing the ethernet interface that\nis tagged with the Default VLAN by stripping off the VLAN and transmitting\nas untagged traffic.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10EthMgmtVlanDefaultId = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 3), Sub10VlanId().clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultId.setDescription("The default vlan id which is tagged to all incoming untagged\nuser traffic ingressing the ethernet interface. The default VLAN\nis also untagged from all user traffic egressing the ethernet\ninterface.\n\nThe default VLAN must be present in the allowed VLAN table\nsub10EthMgmtVlanAllowedTable and is only valid when\nsub10EthMgmtVlanDefaultEnabled and sub10EthMgmtVlanFiltering are enabled.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10EthMgmtVlanDefaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 4), Sub10VlanPriority().clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultPriority.setDescription("The default vlan priority used when tagging the default VLAN\nto all incoming untagged user traffic ingressing the ethernet interface.\n\nOnly valid when sub10EthMgmtVlanDefaultEnabled and sub10EthMgmtVlanFiltering are enabled.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10EthMgmtVlanDefaultDEI = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 5), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtVlanDefaultDEI.setDescription("The default vlan drop eligible indicator used when tagging the default VLAN\nto all incoming untagged user traffic ingressing the ethernet interface.\n\nOnly valid when sub10EthMgmtVlanDefaultEnabled and sub10EthMgmtVlanFiltering are enabled.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10EthMgmtVlanIngressAction = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 6), Sub10VlanTagAction().clone('tag')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtVlanIngressAction.setDescription("The manipulation action used for all ethernet frames\nbeing received (ingress) in from the ethernet interface.\nOnly if the default VLAN is set sub10EthMgmtVlanDefaultVlanId > 0\nand sub10EthMgmtVlanFiltering is enabled.\n\nuntag      - untag all incoming frames that are tagged with sub10EthMgmtVlanDefaultVlanId.\ntag        - tag all incoming untagged frames with sub10EthMgmtVlanDefaultVlanId,\n,sub10EthMgmtVlanDefaultPriority and sub10EthMgmtVlanDefaultDEI.\nand priority sub10EthMgmtTagWithVlanPriority.\ndrop       - discard the frame, do not forward.\n\nThis is currently fixed to tag all ingressing traffic\nif a default VLAN is set sub10EthMgmtVlanDefaultVlanId > 0.")
sub10EthMgmtVlanEgressAction = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 7), Sub10VlanTagAction().clone('untag')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtVlanEgressAction.setDescription("The manipulation action used for all ethernet frames\nbeing transmitted (egress) out of the ethernet interface.\nOnly if the default VLAN is set sub10EthMgmtVlanDefaultVlanId > 0\nand sub10EthMgmtVlanFiltering is enabled.\n\nuntag      - untag all outgoing frames that are tagged with sub10EthMgmtVlanDefaultVlanId.\ntag        - tag all outgoing untagged frames with sub10EthMgmtVlanDefaultVlanId,\n,sub10EthMgmtVlanDefaultPriority and sub10EthMgmtVlanDefaultDEI.\nand priority sub10EthMgmtTagWithVlanPriority.\ndrop       - discard the frame, do not forward.\n\nThis is currently fixed to untag all egressing traffic.")
sub10EthMgmtVlanAllowedTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 8))
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedTable.setDescription("This tables defines the VLANs that are allowed to pass through the ethernet\ninterface. The table is only used when the value of sub10EthMgmtVlanFiltering is enabled.\n\nThe table only contains an entry if the specific vlan is to be allowed to flow through the interface.\nIf a VLAN is not in the table then the ethernet frame is dropped.\n\nIf sub10EthMgmtVlanFiltering is enabled this table must contain at least 1 VLAN.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10EthMgmtVlanAllowedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 8, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtVlanAllowedIndex"))
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedEntry.setDescription("An entry (row) in the sub10UnitMgmtVlanTable.\nIf the rowStatus is set to notInService(2) then\nthe entry is not valid and no columnar objects are returned.")
sub10EthMgmtVlanAllowedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedIndex.setDescription("The sub10EthMgmtVlanTable index.")
sub10EthMgmtVlanAllowedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 8, 1, 2), RowStatus().clone('notInService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedRowStatus.setDescription("The row status of this row.\nAll table rows are fixed in size\nand as such do not require conceptual row\ncreation. Instead the RowStatus is set to\nactive(1) or notInService(2) which indicates\nthat the row is operationally in use or not.\nThe default value is notInService(2) meaning\nthe entry is not used by default. To make\nthe entry valid with already consistent row\nobjects this object must be set to active(1).\nIf row objects are not yet set to consistent\nvalues the row status must first be set to\ncreateAndWait(5) after which the row status is\nset to 'notReady(3)'. When in the 'notReady(3)'\nstate row objects can then be set to consistent\nvalues before row status can be set to active(1).\nTo delete the row set this to destroy(6).")
sub10EthMgmtVlanAllowedId = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 2, 8, 1, 3), Sub10VlanId().clone('0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedId.setDescription("The vlan id which is allowed to pass through the ethernet interface.\nDuplicate vlan ids in multiple entries of the table with RowStatus 'active(1)\nare not allowed and any attempt to set a duplicate active entry will be rejected.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10EthMgmtQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3))
sub10EthMgmtQoSState = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 1), Sub10State().clone('stateEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSState.setDescription("This defines if QoS is enabled or disabled.")
sub10EthMgmtQoSMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("qosEthernet", 1), ("qosIPMPLS", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSMode.setDescription("Defines the mode of QoS action to be applied to\nthe QoS queues.\n\nqosEthernet:\n\n- Traffic is mapped to QoS queues\n- based on Ethernet protocol\n- VLANId and/or PCP Bits.\n- See sub10EthMgmtQoSVlanMappingTable\n- and sub10EthMgmtQoSPCPMappingTable.\n\nqosIPMPLS:\n\n- Traffic is mapped to QoS queues\n- based on IP protocol\n- DSCP markings and/or MPLS traffic\n- classes.\n\nSee sub10EthMgmtQoSDSCPMappingTable and sub10EthMgmtQoSMPLSMappingTable.")
sub10EthMgmtQoSUntaggedQueue = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 3), Sub10QoSQueue().clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSUntaggedQueue.setDescription("This defines the QoS queue where all untagged\nethernet frames are placed.\n\nOnly valid when sub10EthMgmtQoSQType = 'qosEthernet'\n\nFor tagged frames see sub10EthMgmtQoSVlanMappingTable\nand sub10EthMgmtQoSPCPMappingTable.")
sub10EthMgmtQoSQTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4))
if mibBuilder.loadTexts: sub10EthMgmtQoSQTable.setDescription("This table configures the characteristics of a Quality of\nService queue. There are a fixed number of 8 queues in total\nand therefore 8 entries in this table indexed 1 thru 8.\n\nThe number of queue entries in the table is given by the value\nof sub10EthMgmtQoSQNumber.")
sub10EthMgmtQoSQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQIndex"))
if mibBuilder.loadTexts: sub10EthMgmtQoSQEntry.setDescription("An entry (row) in the sub10EthMgmtQoSQTable.")
sub10EthMgmtQoSQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10EthMgmtQoSQIndex.setDescription("The queue number used as an index, fixed to\n8 standard queues.")
sub10EthMgmtQoSQSchedulingType = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("qosSPQ", 1), ("qosDWRR", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSQSchedulingType.setDescription("The scheduling discipline applied to the\nqueue.\n\nqosSPQ - Strict Priority Queueing\n\nQueues are serviced in strict priority\norder. Packets on the queue are servicedd\nand transmitted until either the queue is empty\nor a packet is found in a higher queue,\nin the latter case the higher priority queue\ntake precedence.\n\nIndividual PCP (CoS) bits or DSCP markings in each\npacket are not observed within the\nqueue and are not therefore transmitted first\naccording to their relative priority. Instead\nit is possible to map certain VLANs, PCP bits\nand DSCP marking to certain queues to achieve\npriority transmission.\n\nThe mapping of VLAN, PCP bits or DSCP markings\nto a specific queue are managed using\ntables :\n\nsub10EthMgmtQoSVlanTable\nsub10EthMgmtQoSPCPTable\nsub10EthMgmtQoSDSCPTable\n\nqosDWRR - Deficit Weighted Round Robin\n\nA weighting is allocated to each queue\nwhich defines the number of bytes\nthat can be transmitted from that\nqueue in a single visit of the\nscheduler. This is used to calculate\na quantum which is the number of bytes\nthat can always be transmitted in each visit\nof the scheduler.\n\nA deficit counter is also maintained across\nvisits from the scheduler, at each visit\nthe quantum is added to the deficit. This\nensures that on average a queue that is not\nloaded to its intended capacity will utilise\nthe calculated deficit at times when the queue\nis busy. At startup Deficit counter is initialised\nto zero.\n\nOn each visit of the scheduler packets are\ntransmitted according to the following\nrules...\n\nDeficit = Quantum + Deficit.\n\nwhile (Queue not empty and PktLength <= Deficit)\nTransmit Pkt\nDeficit = Deficit - PktLength\n\nRemaining Deficit is carried forward to the\nnext visit of the scheduler.\n\nEffective behaviour of DWRR is as follows:\n\n1. Available bandwidth is shared fairly when queues\nare not saturated\n2. Lower priority saturated queues will transmit\nat their allocated service rate.\n3. Any remaining bandwidth is shared amongst\nunsaturated queues.\n\nNB. In a mixed configuration where some queues are\nconfigured as Strict Priority (SP) and some configured\nas Deficit Weighted Round Robin (DWRR), then queues configured\nas SP should all be higher in scheduling priority than those\nconfigured as DWRR. This is to avoid the lower priority queues\nhaving transmission precedence over higher priority queues.")
sub10EthMgmtQoSQDWRRWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSQDWRRWeight.setDescription("A percentage weighting factor used to calculate\nthe quantum value used to calculate the starting\ntransmission credit at each visit of the queue\nscheduler. Only for scheduling type  Deficit\nWeighted Round Robin.\nsub10EthMgmtQoSQSchedulingType = 'qosDWRR'\n\nThe weighting is calculated as the ratio of the\ntransmit rate configured as a percentage. The\ninternal implementation of DWRR will calculate\nthe correct quantum based on total bandwidth\navailable.")
sub10EthMgmtQoSQCongestionPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,)).subtype(namedValues=NamedValues(("qosTailDrop", 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSQCongestionPolicy.setDescription("The policy used when a queue is congested.")
sub10EthMgmtQoSQSizeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(100)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtQoSQSizeMax.setDescription("The maximum size of the queue expressed in packets.")
sub10EthMgmtQoSQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtQoSQLen.setDescription("The current length of the queue expressed in packets.")
sub10EthMgmtQoSVlanMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanMappingNumber.setDescription("The number of sub10EthMgmtQoSVlanMappingTable table entries present\non this system.")
sub10EthMgmtQoSVlanTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 6))
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanTable.setDescription("This table configures the Quality of Service\nVlan to queue mapping.\n\nMultiple Vlans may be mapped to any queue. On egress of the\nethernet interface all pkts tagged with the specific Vlan Id\nare inserted onto the specified queue.\n\nSee sub10EthMgmtQoSQTable for more information on QoS\nqueueing.\n\nThe number of entries in the table is given by the value\nof sub10EthMgmtQoSVlanNumber.")
sub10EthMgmtQoSVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 6, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtQoSVlanIndex"))
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanEntry.setDescription("An entry (row) in the sub10EthMgmtQoSVlanMappingTable.")
sub10EthMgmtQoSVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanIndex.setDescription("The sub10EthMgmtQoSVlanMappingTable index.")
sub10EthMgmtQoSVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 6, 1, 2), Sub10VlanId().clone('0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanId.setDescription("The vlan id used as an index to the table and which\nis egressing through the ethernet interface and which\nshould be placed on the queue specified by\nsub10EthMgmtQoSVlanQueueIndex.")
sub10EthMgmtQoSVlanQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 6, 1, 3), Sub10QoSQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanQueue.setDescription("The queue number which identifies the specific queue where the packets\nthat are tagged with the Vlan Id specified in sub10EthMgmtQoSVlanId\nare inserted.")
sub10EthMgmtQoSPCPTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 8))
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPTable.setDescription("This table configures the Quality of Service Priority\nCode Point (PCP) or Pbits to queue mapping.\n\nMultiple PCPs may be mapped to the same queue but the same\nPCP cannot be mapped to more than one queue. This table\nhas a maximum size of 8 entries with exactly 1 entry per\nPCP bit.\n\nOn egress of the ethernet interface all pkts tagged with the\nspecific PCP bit (irrespective of its Vlan Id) is inserted\non the specified queue.\n\nSee sub10EthMgmtQoSQTable for more information on QoS\nqueueing.\n\nThe number of entries in the table is given by the value\nof sub10EthMgmtQoSPCPMappingNumber (maximum 8).")
sub10EthMgmtQoSPCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 8, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtQoSPCPIndex"))
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPEntry.setDescription("An entry (row) in the sub10EthMgmtQoSPCPMappingTable.")
sub10EthMgmtQoSPCPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPIndex.setDescription("The sub10EthMgmtQoSPCPTable index.\nThis represents the PCP bits priority\nvalue.\n\nsub10EthMgmtQoSPCPIndex(1)=PCPBit(0)\nsub10EthMgmtQoSPCPIndex(2)=PCPBit(1)\nsub10EthMgmtQoSPCPIndex(3)=PCPBit(2)\nsub10EthMgmtQoSPCPIndex(4)=PCPBit(3)\nsub10EthMgmtQoSPCPIndex(5)=PCPBit(4)\nsub10EthMgmtQoSPCPIndex(6)=PCPBit(5)\nsub10EthMgmtQoSPCPIndex(7)=PCPBit(6)\nsub10EthMgmtQoSPCPIndex(8)=PCPBit(7)")
sub10EthMgmtQoSPCPQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 8, 1, 2), Sub10QoSQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPQueue.setDescription("The queue number in the sub10EthMgmtQoSQTable\nwhich identifies the specific queue where the packets\ntagged with the specific PCP bit sub10EthMgmtQoSPCPIndex\nare inserted. There are up to 8 queues.")
sub10EthMgmtQoSDSCPMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPMappingNumber.setDescription("The number of sub10EthMgmtQoSDSCPMappingTable table entries present\non this system.")
sub10EthMgmtQoSDSCPTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 10))
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPTable.setDescription("This table configures the Quality of Service Differentiated\nServices Code Point (DSCP) to queue mapping.\n\nMultiple DSCPs may be mapped to the same queue but the same\nDSCP cannot be mapped to more than one queue. This table has\na maximum size of 64 with 1 entry per DSCP value.\n\nOn egress of the ethernet interface all pkts tagged with the\nspecific DSCP marking in the IP header will be inserted\nonto the specified queue.\n\nSee sub10EthMgmtQoSQTable for more information on QoS\nqueueing.\n\nThe number of entries in the table is given by the value\nof sub10EthMgmtQoSDSCPMappingNumber (maximum 64).")
sub10EthMgmtQoSDSCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 10, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtQoSDSCPIndex"))
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPEntry.setDescription("An entry (row) in the sub10EthMgmtQoSDSCPMappingTable.")
sub10EthMgmtQoSDSCPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPIndex.setDescription("The sub10EthMgmtQoSDSCPTable index.")
sub10EthMgmtQoSDSCPMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPMarking.setDescription("The DSCP value used as an index to the table. This defines\nthe DSCP value which when egressing through the ethernet\ninterface is placed on the queue specified by\nsub10EthMgmtQoSVlanQueueIndex.")
sub10EthMgmtQoSDSCPQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 10, 1, 3), Sub10QoSQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPQueue.setDescription("The queue number in the sub10EthMgmtQoSQTable\nwhich identifies the specific queue where the packets\ntagged with the specific DSCP marking sub10EthMgmtQoSDSCP\nare inserted.")
sub10EthMgmtQoSMPLSMappingNumber = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSMappingNumber.setDescription("The number of sub10EthMgmtQoSMPLSMappingTable table entries present\non this system.This is equivelent to the number of MPLS Traffic\nclasses")
sub10EthMgmtQoSMPLSTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 12))
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSTable.setDescription("This table configures the Quality of Service Multi-Protocol\nLabel Switching protocol (MPLS) Traffic Class (TC) to queue mapping.\n\nMultiple MPLS TCs may be mapped to the same queue but the same\nMPLS TC cannot be mapped to more than one queue. This table has\na maximum size of 64 with 1 entry per MPLS TC value.\n\nOn egress of the ethernet interface all pkts tagged with the\nspecific MPLS TC in the IP header will be inserted\nonto the specified queue.\n\nSee sub10EthMgmtQoSQTable for more information on QoS\nqueueing.\n\nThe number of entries in the table is given by the value\nof sub10EthMgmtQoSMPLSMappingNumber (maximum 8).")
sub10EthMgmtQoSMPLSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 12, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMPLSIndex"))
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSEntry.setDescription("An entry (row) in the sub10EthMgmtQoSMPLSMappingTable.")
sub10EthMgmtQoSMPLSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSIndex.setDescription("The sub10EthMgmtQoSMPLSMappingTable index.")
sub10EthMgmtQoSMPLSTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 12, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSTrafficClass.setDescription("The MPLS Traffic Class value used as an index to the table.\nThis defines the MPLS TC value which when egressing through\nthe ethernet interface is placed on the queue specified by\nsub10EthMgmtQoSVlanQueueIndex.")
sub10EthMgmtQoSMPLSQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 3, 12, 1, 3), Sub10QoSQueue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSQueue.setDescription("The queue number in the sub10EthMgmtQoSQTable\nwhich identifies the specific queue where the packets\ntagged with the specific MPLS Traffic Class\nsub10EthMgmtQoSMPLSTrafficClass are inserted.")
sub10EthMgmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4))
sub10EthMgmtStatsActiveTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4, 1))
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveTable.setDescription("This table maintains an entry for each Ethernet\nstatistic that is enabled and active.")
sub10EthMgmtStatsActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4, 1, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthMgmtStatsActiveIndex"))
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveEntry.setDescription("An entry in the sub10EthMgmtStatsActiveTable.\nEach entry represents an object instance of ethernet\nstats and it's current state.")
sub10EthMgmtStatsActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveIndex.setDescription("The number of ethernet stats objects\nused as an index to this table.")
sub10EthMgmtStatsActiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveName.setDescription("The stats object name. This is the name of the\nethernet stats object in the sub10EthernetStatsCurrent\ngroup.")
sub10EthMgmtStatsActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 2, 4, 1, 1, 3), Sub10State().clone('stateEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveState.setDescription("If set to 'enabled' the statistic is active.")
sub10EthernetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 3))
sub10EthStatsTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsTimeElapsed.setDescription("The time that has elapsed from the beginning\nof the statistical measurement period.\n\nThis is normally time from just after the last reboot time\nwhen the statistics module begins it's calculations.\n\nIf, for some reason, such as an adjustment in the\nsystem's time-of-day clock, the current interval\nexceeds the maximum value, the agent will return\nthe maximum value.")
sub10EthernetStatsCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2))
sub10EthStatsCurrRxOctets = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxOctets.setDescription("The number of octets received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxGoodFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxGoodFrms.setDescription("The number of good frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxBcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxBcastFrms.setDescription("The number of broadcast frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxMcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxMcastFrms.setDescription("The number of multicast frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxPauseFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxPauseFrms.setDescription("The number of Pause frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxCRCErrs = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxCRCErrs.setDescription("The number of CRC errors received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxAlignErrs = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxAlignErrs.setDescription("The number of Alignment coding errors received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxOversized = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxOversized.setDescription("The number of Oversized frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxJabberFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxJabberFrms.setDescription("The number of Jabber frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxUndersized = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxUndersized.setDescription("The number of Undersized frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxFragments = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxFragments.setDescription("The number of frame fragments received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrRxSOFOvrns = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrRxSOFOvrns.setDescription("The number of frames with Start of Frame (SOF) Overruns\nreceived over the Ethernet interface or were dropped due to\nFIFO resource limitations since the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxOctets = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxOctets.setDescription("The number of octets transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxGoodFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxGoodFrms.setDescription("The number of ethernet frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxBcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxBcastFrms.setDescription("The number of broadcast frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxMcastFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxMcastFrms.setDescription("The number of multicast frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxPauseFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxPauseFrms.setDescription("The number of Pause frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxDeferred = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxDeferred.setDescription("The number of Deferred frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxCollsn = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxCollsn.setDescription("The number of Collision frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxSnglCollsn = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxSnglCollsn.setDescription("The number of Single Collision frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxMlplCollsn = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxMlplCollsn.setDescription("The number of Multiple Collision frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxExsvCollsn = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxExsvCollsn.setDescription("The number of Excessive Collision for which transmission was\nabandoned over the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxLtCollsn = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxLtCollsn.setDescription("The number of Late Collision for which transmission was\nabandoned over the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrTxCSenseErrs = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrTxCSenseErrs.setDescription("The number of Carrier Sense Errored frames transmitted over the\nEthernet interface since the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts64Octets = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts64Octets.setDescription("The total number of 64-byte frames received and transmitted on the\nEthernet interface since the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts65T127 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts65T127.setDescription("The total number of frames of size 65 to 127 bytes received\nand transmitted on the Ethernet interface since the last\npower cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts128T255 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts128T255.setDescription("The total number of frames of size 128 to 255 bytes received\nand transmitted on the Ethernet interface since the last\npower cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts256T511 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts256T511.setDescription("The total number of frames of size 256 to 511 bytes received\nand transmitted on the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts512T1023 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts512T1023.setDescription("The total number of frames of size 512 to 1023 bytes received\nand transmitted on the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStatsCurrPkts1024TMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 2, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStatsCurrPkts1024TMax.setDescription("The total number of frames of size  1024 to RX_MAXLEN bytes for\nreceive or 1024 up for transmit on the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthernetStatsHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3))
sub10EthernetStats15mHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1))
sub10EthStats15mHistIntvls = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistIntvls.setDescription("The number of valid table entries in sub10EthStats15mHistTable\non this system. There is one entry per 15 minute interval.\nIf the unit has been running for a minimum of 24 hours\nand collecting valid data then the number of entries will be 96,\nthis represents a total maximum of 24 hours worth of data.")
sub10EthStats15mHistTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2))
if mibBuilder.loadTexts: sub10EthStats15mHistTable.setDescription("This table maintains a history of Ethernet statistics\nbased on 15 minute intervals. There are a maximum\nof 96 intervals which represent 24 hours of data.\n\nThis table along with the 1m and 1d tables provide a\nhistory of the performance of the radio interface. This\ninformation may then be post processed and used as a\ntroubleshooting tool.\n\nAn entry in the table represents a 15 minute interval\nwhere each interval is synchronised to the clock on the\nhour. There are up to 96 intervals starting at 1. The\nnumber of valid entries in the table is given by the value\nof sub10EthStats15mHistIntvls of which the minimum\nis 0 and the maximum is 96 therefore providing\nup to a maximum of 24 hours of 15 minute interval data.\n\nThe first entry indexed by 1 represents the most recent\ncompleted 15 minute interval. At the end of each interval\nall entries of 'index' are copied into entry 'index+1'. If the\nnumber of valid intervals is 96 then the least recent interval\nentry is summarised into 24 hour stats and then discarded.")
sub10EthStats15mHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthStats15mHistIntvl"))
if mibBuilder.loadTexts: sub10EthStats15mHistEntry.setDescription("An entry in the sub10EthStats15mHistTable.\nEach entry represents 15 minute of performance\nmanagement data where the first entry with index=1\nis the most recent 15 minute interval and the last\nentry with index=n (up to 96) is the least recent\n15 minute interval. The number of valid intervals\nis sub10EthStats15mHistIntvls.")
sub10EthStats15mHistIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10EthStats15mHistIntvl.setDescription("The interval number used as an index to this\ntable. Interval numbers start at 1 (the most\nrecent 15 minute interval) and have a maximum value of 96\n(the least recent 15 minute interval).")
sub10EthStats15mHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 2), Sub10DateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthStats15mHistTime.setDescription("The local system time when this 15m history entry was created.\nThis represents the end of the 15 minute interval for which the\nassociated stats with the same sub10EthStats15mHistIntvl\ntable index are relevant.")
sub10EthStats15mHistRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxOctets.setDescription("The number of octets received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxGoodFrms.setDescription("The number of good frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxBcastFrms.setDescription("The number of broadcast frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxMcastFrms.setDescription("The number of multicast frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxPauseFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxPauseFrms.setDescription("The number of Pause frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxCRCErrs.setDescription("The number of CRC errors received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxAlignErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxAlignErrs.setDescription("The number of Alignment coding errors received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxOversized = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxOversized.setDescription("The number of Oversized frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxJabberFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxJabberFrms.setDescription("The number of Jabber frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxUndersized = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxUndersized.setDescription("The number of Undersized frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxFragments.setDescription("The number of frame fragments received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistRxSOFOvrns = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistRxSOFOvrns.setDescription("The number of frames with Start of Frame (SOF) Overruns\nreceived over the Ethernet interface or were dropped due to\nFIFO resource limitations since the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxOctets.setDescription("The number of octets transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxGoodFrms.setDescription("The number of ethernet frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxBcastFrms.setDescription("The number of broadcast frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxMcastFrms.setDescription("The number of multicast frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxPauseFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxPauseFrms.setDescription("The number of Pause frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxDeferred.setDescription("The number of Deferred frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxCollsn.setDescription("The number of Collision frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxSnglCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxSnglCollsn.setDescription("The number of Single Collision frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxMlplCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxMlplCollsn.setDescription("The number of Multiple Collision frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxExsvCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxExsvCollsn.setDescription("The number of Excessive Collision for which transmission was\nabandoned over the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxLtCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxLtCollsn.setDescription("The number of Late Collision for which transmission was\nabandoned over the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistTxCSenseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistTxCSenseErrs.setDescription("The number of Carrier Sense Errored frames transmitted over the\nEthernet interface since the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts64Octets.setDescription("The total number of 64-byte frames received and transmitted on the\nEthernet interface since the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts65T127 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts65T127.setDescription("The total number of frames of size 65 to 127 bytes received\nand transmitted on the Ethernet interface since the last\npower cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts128T255 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts128T255.setDescription("The total number of frames of size 128 to 255 bytes received\nand transmitted on the Ethernet interface since the last\npower cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts256T511 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts256T511.setDescription("The total number of frames of size 256 to 511 bytes received\nand transmitted on the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts512T1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts512T1023.setDescription("The total number of frames of size 512 to 1023 bytes received\nand transmitted on the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats15mHistPkts1024TMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats15mHistPkts1024TMax.setDescription("The total number of frames of size  1024 to RX_MAXLEN bytes for\nreceive or 1024 up for transmit on the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2))
sub10EthStats1dHistIntvls = MibScalar((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistIntvls.setDescription("The number of valid table entries in sub10EthStats1dHistTable\non this system. There is one entry per 1 day interval.\n\nIf the unit has been running for a minimum  of 30 days\nand collecting valid data then the number of entries will be 30,\nthis represents a total maximum of 30 days worth of data.")
sub10EthStats1dHistTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2))
if mibBuilder.loadTexts: sub10EthStats1dHistTable.setDescription("This table maintains a history of Radio statistics\nbased on 1 day intervals. There are a maximum\nof 30 intervals which represent 30 days of data.\n\nThis table along with the 1m and 15m tables provide a\nhistory of the performance of the radio interface. This\ninformation may then be post processed and used as a\ntroubleshooting tool.\n\nAn entry in the table represents a 1 day interval\nwhere each interval is synchronised to the clock on the\nhour. There are up to 30 intervals starting at 1. The\nnumber of valid entries in the table is given by the value\nof sub10EthStats1dHistIntvls of which the minimum\nis 0 and the maximum is 30 therefore providing\nup to a maximum of 30 days of 1 day interval data.\n\nThe first entry indexed by 1 represents the most recent\ncompleted 1 day interval. At the end of each interval\nall entries of 'index' are copied into entry 'index+1'. If the\nnumber of valid intervals is 30 then the least recent interval\nentry is discarded.")
sub10EthStats1dHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10EthStats1dHistIntvl"))
if mibBuilder.loadTexts: sub10EthStats1dHistEntry.setDescription("An entry in the sub10EthStats1dHistTable.\nEach entry represents 1 day of performance\nmanagement data where the first entry with index=1\nis the most recent 1 day interval and the last\nentry with index=n (up to 30) is the least recent\n1 day interval.\n\nThe number of valid intervals is given by the\nvalue of sub10EthStats1dHistIntvls.")
sub10EthStats1dHistIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10EthStats1dHistIntvl.setDescription("The interval number used as an index to this\ntable. Interval numbers start at 1 (the most\nrecent 15 minute interval) and have a maximum value of 96\n(the least recent 15 minute interval).")
sub10EthStats1dHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 2), Sub10DateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10EthStats1dHistTime.setDescription("The local system time when this 1d history entry was created.\nThis represents the end of the 1 day interval for which the\nassociated stats with the same sub10EthStats1dHistIntvl\ntable index are relevant.")
sub10EthStats1dHistRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxOctets.setDescription("The number of octets received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxGoodFrms.setDescription("The number of good frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxBcastFrms.setDescription("The number of broadcast frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxMcastFrms.setDescription("The number of multicast frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxPauseFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxPauseFrms.setDescription("The number of Pause frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxCRCErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxCRCErrs.setDescription("The number of CRC errors received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxAlignErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxAlignErrs.setDescription("The number of Alignment coding errors received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxOversized = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxOversized.setDescription("The number of Oversized frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxJabberFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxJabberFrms.setDescription("The number of Jabber frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxUndersized = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxUndersized.setDescription("The number of Undersized frames received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxFragments.setDescription("The number of frame fragments received over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistRxSOFOvrns = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistRxSOFOvrns.setDescription("The number of frames with Start of Frame (SOF) Overruns\nreceived over the Ethernet interface or were dropped due to\nFIFO resource limitations since the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxOctets.setDescription("The number of octets transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxGoodFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxGoodFrms.setDescription("The number of ethernet frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxBcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxBcastFrms.setDescription("The number of broadcast frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxMcastFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxMcastFrms.setDescription("The number of multicast frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxPauseFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxPauseFrms.setDescription("The number of Pause frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxDeferred.setDescription("The number of Deferred frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxCollsn.setDescription("The number of Collision frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxSnglCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxSnglCollsn.setDescription("The number of Single Collision frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxMlplCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxMlplCollsn.setDescription("The number of Multiple Collision frames transmitted over the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxExsvCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxExsvCollsn.setDescription("The number of Excessive Collision for which transmission was\nabandoned over the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxLtCollsn = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxLtCollsn.setDescription("The number of Late Collision for which transmission was\nabandoned over the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistTxCSenseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistTxCSenseErrs.setDescription("The number of Carrier Sense Errored frames transmitted over the\nEthernet interface since the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts64Octets.setDescription("The total number of 64-byte frames received and transmitted on the\nEthernet interface since the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts65T127 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts65T127.setDescription("The total number of frames of size 65 to 127 bytes received\nand transmitted on the Ethernet interface since the last\npower cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts128T255 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts128T255.setDescription("The total number of frames of size 128 to 255 bytes received\nand transmitted on the Ethernet interface since the last\npower cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts256T511 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts256T511.setDescription("The total number of frames of size 256 to 511 bytes received\nand transmitted on the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts512T1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts512T1023.setDescription("The total number of frames of size 512 to 1023 bytes received\nand transmitted on the Ethernet interface since the last power\ncycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10EthStats1dHistPkts1024TMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 4, 3, 3, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EthStats1dHistPkts1024TMax.setDescription("The total number of frames of size  1024 to RX_MAXLEN bytes for\nreceive or 1024 up for transmit on the Ethernet interface\nsince the last power cycle / reset of the unit.\n\nFor more information refer to online techical documentation at\nhttp://www.ti.com. Product c667xDSP 'Gigabit Ethernet\nSwitch Subsystem for KeyStone Devices User's Guide'.")
sub10Radio = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5))
sub10RadioStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 1))
sub10RadioLocalStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1))
sub10RadioLclLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 1), Sub10RadioLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclLinkStatus.setDescription("The status of the local radio link.")
sub10RadioLclTxPower = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-30, 30)).clone(0)).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioLclTxPower.setDescription("The current transmit power of the local radio link,\nmeasured in dBm.")
sub10RadioLclRxPower = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioLclRxPower.setDescription("The current receive power of the local radio link,\nmeasured in dBm.")
sub10RadioLclVectErr = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclVectErr.setDescription("The current vector error of the local radio link,\nmeasured in dB.")
sub10RadioLclLnkLoss = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclLnkLoss.setDescription("The current link loss of the local radio link,\nmeasured in dB.")
sub10RadioLclAlignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 6), Sub10AlignmentMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclAlignmentMode.setDescription("Alignment mode is modeAlignment(1) if the alignment / reset cap\nhas been removed for > 5sec otherwise modeNormal(0). The alignment\nmode is managed using sub10RadioMgmtAlignmentMode.")
sub10RadioLclDataRate = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 7), Sub10RadioDataRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclDataRate.setDescription("The maximum data rate of the Airside interface.")
sub10RadioLclMWUType = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 1, 8), Sub10MWUType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioLclMWUType.setDescription("The local MWU type")
sub10RadioRemoteStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2))
sub10RadioRmtLinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 1), Sub10RadioLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioRmtLinkStatus.setDescription("The status of the remote radio link.")
sub10RadioRmtTxPower = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioRmtTxPower.setDescription("The current transmit power of the remote radio link,\nmeasured in dBm.")
sub10RadioRmtRxPower = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioRmtRxPower.setDescription("The current receive power of the remote radio link,\nmeasured in dBm.")
sub10RadioRmtVectErr = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioRmtVectErr.setDescription("The current vector error of the remote radio link,\nmeasured in dB.")
sub10RadioRmtLnkLoss = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioRmtLnkLoss.setDescription("The current link loss of the remote radio link,\nmeasured in dB.")
sub10RadioRmtAlignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 1, 2, 7), Sub10AlignmentMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioRmtAlignmentMode.setDescription("The remote radio unit's Alignment mode.\nAlignment mode is modeAlignment(1) if the alignment / reset cap\nhas been removed for > 5sec otherwise modeNormal(0).")
sub10RadioMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 2))
sub10RadioMgmtTxPowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 1), Sub10TxPowerLimit().clone('txPowerLimitNone')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtTxPowerLimit.setDescription("The configured transmit power of radio link.\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10RadioMgmtTxRxFreq = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(28,30,0,20,2,3,31,9,7,10,5,8,32,33,27,24,11,29,25,12,19,36,13,23,35,1,34,4,26,6,14,18,17,16,15,21,37,22,)).subtype(namedValues=NamedValues(("e250Tx71250Rx81250", 0), ("e250Tx71500Rx81500", 1), ("e250Tx73750Rx83750", 10), ("e250Tx74000Rx84000", 11), ("e250Tx74250Rx84250", 12), ("e250Tx74500Rx84500", 13), ("e250Tx74750Rx84750", 14), ("e250Tx75000Rx85000", 15), ("e250Tx75250Rx85250", 16), ("e250Tx75500Rx85500", 17), ("e250Tx75750Rx85750", 18), ("e500Tx72375Rx82375", 19), ("e250Tx71750Rx81750", 2), ("e500Tx72625Rx82625", 20), ("e500Tx72875Rx82875", 21), ("e500Tx73125Rx83125", 22), ("e500Tx73375Rx83375", 23), ("e500Tx73625Rx83625", 24), ("e500Tx73875Rx83875", 25), ("e500Tx74125Rx84125", 26), ("e500Tx74375Rx84375", 27), ("e500Tx74625Rx84625", 28), ("v500Tx58500Rx61500", 29), ("e250Tx72000Rx82000", 3), ("v500Tx58500Rx62000", 30), ("v500Tx58500Rx62500", 31), ("v500Tx59000Rx61500", 32), ("v500Tx59000Rx62000", 33), ("v500Tx59000Rx62500", 34), ("v500Tx59500Rx61500", 35), ("v500Tx59500Rx62000", 36), ("v500Tx59500Rx62500", 37), ("e250Tx72250Rx82250", 4), ("e250Tx72500Rx82500", 5), ("e250Tx72750Rx82750", 6), ("e250Tx73000Rx83000", 7), ("e250Tx73250Rx83250", 8), ("e250Tx73500Rx83500", 9), )).clone(36)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtTxRxFreq.setDescription("The configured TX/RX frequency pairs of radio link. Each enumerated option\nrepresents the TX and RX frequency pair settings in MHz.\nOptions are available for E-Band at channel width 250MHz and 500MHz\nand E-Band channel width 500MHz.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10RadioMgmtAPCMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,2,)).subtype(namedValues=NamedValues(("apcModeDisabled", 0), ("apcModeVariable", 1), ("apcModeFixed", 2), )).clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtAPCMode.setDescription("Automatic Transmit Power Control. The initial setting of transmit\npower used is defined by sub10RadioMgmtTxPower. If sub10RadioMgmtAtpc\nis enabled then the transmit power may then vary according to the\nRSSI measured from the remote end of the link. The actual transmit power is\nreadable in sub10RadioLclTxPower at the local end and sub10RadioRmtTxPower\nat the remote end of the link.\n\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10RadioMgmtModulationMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,2,)).subtype(namedValues=NamedValues(("modeqpsk", 1), ("mode8psk", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtModulationMode.setDescription("Set the highest order Modulation Mode attempted by Adaptive Modulation.\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10RadioMgmtAmod = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 5), Sub10State().clone('stateDisabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtAmod.setDescription("Adaptive Modulation mode.")
sub10RadioMgmtAlignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 6), Sub10AlignmentMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtAlignmentMode.setDescription("Alignment mode is modeAlignment(1) if the alignment / reset cap\nhas been removed for > 5sec otherwise modeNormal(0). The alignment\nmode can be manually changed by setting this object.")
sub10RadioMgmtMWUChannelWidth = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("channelWidth250", 0), ("channelWidth500", 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtMWUChannelWidth.setDescription("MWU Channel width.\nIMPORTANT: This object is controlled by transaction management.\nAny changes to this object must be transactionally acknowledged\nfollowing a successful set thus protecting against loss of\ncommunication with the unit. To acknowledge the transaction\nset the object sub10UnitMgmtTransaction to transactionCommit(2).")
sub10RadioMgmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9))
sub10RadioMgmtStats1dPersist = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 1), Sub10State().clone('stateEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtStats1dPersist.setDescription("If set to 'stateEnabled(1) the sub10RadioStats1dHistTable objects\nare stored and read in on startup. This makes the history\nnon-volatile across unit resets.")
sub10RadioMgmtStatsActiveTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 4))
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveTable.setDescription("This table maintains an entry for each Radio\nstatistic that is enabled and active.")
sub10RadioMgmtStatsActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 4, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10RadioMgmtStatsActiveIndex"))
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveEntry.setDescription("An entry in the sub10RadioMgmtStatsActiveTable.\nEach entry represents an object instance of Radio\nstats and it's current state.")
sub10RadioMgmtStatsActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 29))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveIndex.setDescription("The number of Radio stats objects\nused as an index to this table.")
sub10RadioMgmtStatsActiveName = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveName.setDescription("The stats object name. This is the name of the\nethernet stats object in the sub10RadioStatsCurrent\ngroup.")
sub10RadioMgmtStatsActiveState = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 2, 9, 4, 1, 3), Sub10State().clone('stateEnabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveState.setDescription("If set to 'enabled' the statistic is active.")
sub10RadioStats = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3))
sub10RadioStatsTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsTimeElapsed.setDescription("The time that has elapsed from the beginning\nof the statistical measurement period.\n\nThis is normally time from just after the last reboot time\nwhen the statistics module begins it's calculations.\n\nIf, for some reason, such as an adjustment in the\nsystem's time-of-day clock, the current interval\nexceeds the maximum value, the agent will return\nthe maximum value.")
sub10RadioStatsCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2))
sub10RadioStatsCurrTxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPowerMin.setDescription("The minimum value that the transmit power of the local radio\nlink has reached since a reboot, measured in dBm.")
sub10RadioStatsCurrTxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPowerMax.setDescription("The maximum value that the transmit power of the local radio\nlink has reached since a reboot, measured in dBm.")
sub10RadioStatsCurrTxPowerAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPowerAvg.setDescription("The average value of the transmit power of the local radio\nlink since a reboot, measured in dBm.")
sub10RadioStatsCurrRxPowerMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPowerMin.setDescription("The minimum value that the receive power of the local radio\nlink has reached since a reboot, measured in dBm.")
sub10RadioStatsCurrRxPowerMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPowerMax.setDescription("The maximum value that the receive power of the local radio\nlink has reached since a reboot, measured in dBm.")
sub10RadioStatsCurrRxPowerAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPowerAvg.setDescription("The average value of the receive power of the local radio\nlink since a reboot, measured in dBm.")
sub10RadioStatsCurrVectErrMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrVectErrMin.setDescription("The minimum value that the vector error of the local radio\nlink has reached since a reboot, measured in dB.")
sub10RadioStatsCurrVectErrMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrVectErrMax.setDescription("The maximum value that the vector error of the local radio\nlink has reached since a reboot, measured in dB.")
sub10RadioStatsCurrVectErrAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrVectErrAvg.setDescription("The average value of the vector error of the local radio\nlink since a reboot, measured in dB.")
sub10RadioStatsCurrLnkLossMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioStatsCurrLnkLossMin.setDescription("The minimum value that the link loss of the local radio\nlink has reached since a reboot, measured in dB.")
sub10RadioStatsCurrLnkLossMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioStatsCurrLnkLossMax.setDescription("The maximum value that the link loss of the local radio\nlink has reached since a reboot, measured in dB.")
sub10RadioStatsCurrLnkLossAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly").setUnits("dBm")
if mibBuilder.loadTexts: sub10RadioStatsCurrLnkLossAvg.setDescription("The average value of the link loss of the local radio\nlink since a reboot, measured in dB.")
sub10RadioStatsCurrRxFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxFrms.setDescription("The number of Airside frames received over the Radio interface.\nThis is irrespective of whether the Airside frame transmitted contained\nany ethernet data.\n\nSet to zero on unit reset.")
sub10RadioStatsCurrTxFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxFrms.setDescription("The number of Airside frames transmitted over the Radio interface.\nThis is irrespective of whether the Airside frame transmitted contained\nany ethernet data.\n\nSet to zero on unit reset.")
sub10RadioStatsCurrRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxPkts.setDescription("The number of Ethernet packets received over the Radio interface.\nThis includes all packets whether destined for the management\nsub-system on this unit or to be sent direct to the Ethernet interface.\n\nSet to zero on unit reset.")
sub10RadioStatsCurrTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxPkts.setDescription("The number of Ethernet packets transmitted over the Radio interface\nwhich originated from the Ethernet interface. This does not include\npackets originating from the management sub-system.\n\nSet to zero on unit reset.")
sub10RadioStatsCurrRxMgmtPkts = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxMgmtPkts.setDescription("The number of Ethernet packets received over the Radio interface\nand which are destined for the management sub-system on this unit.\n\nSet to zero on unit reset.")
sub10RadioStatsCurrTxMgmtPkts = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrTxMgmtPkts.setDescription("The number of Ethernet packets transmitted over the Radio interface\nwhich originated from the management sub-system. This does not include\npackets originating from the Ethernet interface.\n\nSet to zero on unit reset.")
sub10RadioStatsCurrRxBadFrms = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrRxBadFrms.setDescription("The count of bad frames detected on the\nreceive side of the Radio interface. A bad\nframe could be caused by any one of the following\ndetected errors:\n\nUFEC Error\nHeader CRC Error\nFrame CRC Error\nBad header\n\nSet to zero on unit reset.")
sub10RadioStatsCurrES = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrES.setDescription("The number of errored seconds detected on the Radio interface.")
sub10RadioStatsCurrSES = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrSES.setDescription("The number of severely errored seconds detected on the Radio interface.")
sub10RadioStatsCurrBBE = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrBBE.setDescription("The number of errored blocks on the Radio interface.")
sub10RadioStatsCurrUAS = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrUAS.setDescription("The number of unavailable seconds detected on the Radio interface.")
sub10RadioStatsCurrMWUTempMin = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrMWUTempMin.setDescription("The minimum MWU temperature measured over the previous 60 seconds.")
sub10RadioStatsCurrMWUTempMax = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrMWUTempMax.setDescription("The maximum MWU temperature measured over the previous 60 seconds.")
sub10RadioStatsCurrMWUTempAvg = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStatsCurrMWUTempAvg.setDescription("The average MWU temperature measured over the previous 60 seconds.")
sub10RadioStatsHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3))
sub10RadioStats1mHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1))
sub10RadioStats1mHistIntvls = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistIntvls.setDescription("The number of valid table entries in sub10RadioStats1mHistTable\non this system. There is one entry per 1 minute interval.\nIf the unit has been running for a minimum of 15 minutes\nand collecting valid data then the number of entries will be 15,\nthis represents a total maximum of 5 minutes worth of data.")
sub10RadioStats1mHistTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2))
if mibBuilder.loadTexts: sub10RadioStats1mHistTable.setDescription("This table maintains a history of Radio statistics\nbased on 1 minute intervals. There are a maximum\nof 60 intervals which represent 1 hour of data.\n\nThis table along with the 15m and 1d tables provide a\nhistory of the performance of the radio interface. This\ninformation may then be post processed and used as a\ntroubleshooting tool.\n\nAn entry in the table represents a 1 minute interval\nwhere each interval is synchronised to the clock on the\nhour. There are up to 60 intervals starting at 1. The\nnumber of valid entries in the table is given by the value\nof sub10RadioStats1mHistIntvls of which the minimum\nis 0 and the maximum is 60 therefore providing\nup to a maximum of 60 minutes of 1 minute interval data.\n\nThe first entry indexed by 1 represents the most recent\ncompleted 1 minute interval. At the end of each interval\nall entries of 'index' are copied into entry 'index+1'. If the\nnumber of valid intervals is at least 15 then these 15 intervals\nare summarised into 15 minutes stats. At the end of a 60 minute\nperiod the least recent interval is discarded to accomodate\nthe next minute interval.")
sub10RadioStats1mHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10RadioStats1mHistIntvl"))
if mibBuilder.loadTexts: sub10RadioStats1mHistEntry.setDescription("An entry in the sub10RadioStats1mHistTable.\nEach entry represents 1 minute of performance\nmanagement data where the first entry with index=1\nis the most recent 1 minute interval and the last\nentry with index=n (up to 60) is the least recent\n1 minute interval.\n\nThe number of valid intervals is given by the\nvalue of sub10RadioStats1mHistIntvls.")
sub10RadioStats1mHistIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10RadioStats1mHistIntvl.setDescription("The interval number used as an index to this\ntable. Interval numbers start at 1 (the most\nrecent 1 minute interval) and have a maximum value of 60\n(the least recent 1 minute interval).")
sub10RadioStats1mHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 2), Sub10DateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioStats1mHistTime.setDescription("The local system time when this 1m history entry was created.\nThis represents the end of the 1 minute interval for which the\nassociated stats with the same sub10RadioStats1mHistIntvl\ntable index are relevant.")
sub10RadioStats1mHistTxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPowerMin.setDescription("The minimum value that the transmit power of the local radio\nlink has reached in this minute interval, measured in dBm.")
sub10RadioStats1mHistTxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPowerMax.setDescription("The maximum value that the transmit power of the local radio\nlink has reached in this minute interval, measured in dBm.")
sub10RadioStats1mHistTxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPowerAvg.setDescription("The average value that the transmit power of the local radio\nlink has reached in this minute interval, measured in dBm.")
sub10RadioStats1mHistRxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPowerMin.setDescription("The minimum value that the receive power of the local radio\nlink has reached in this minute interval, measured in dBm.")
sub10RadioStats1mHistRxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPowerMax.setDescription("The maximum value that the receive power of the local radio\nlink has reached in this minute interval, measured in dBm.")
sub10RadioStats1mHistRxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPowerAvg.setDescription("The average value that the receive power of the local radio\nlink has reached in this minute interval, measured in dBm.")
sub10RadioStats1mHistVectErrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistVectErrMin.setDescription("The minimum value that the vector error of the local radio\nlink has reached in this minute interval, measured in dB.")
sub10RadioStats1mHistVectErrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistVectErrMax.setDescription("The maximum value that the vector error of the local radio\nlink has reached in this minute interval, measured in dB.")
sub10RadioStats1mHistVectErrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistVectErrAvg.setDescription("The average value that the vector error of the local radio\nlink has reached in this minute interval, measured in dB.")
sub10RadioStats1mHistLnkLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistLnkLossMin.setDescription("The minimum value that the link loss of the local radio\nlink has reached in this minute interval, measured in dB.")
sub10RadioStats1mHistLnkLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistLnkLossMax.setDescription("The maximum value that the link loss of the local radio\nlink has reached in this minute interval, measured in dB.")
sub10RadioStats1mHistLnkLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistLnkLossAvg.setDescription("The average value that the link loss of the local radio\nlink has reached in this minute interval, measured in dB.")
sub10RadioStats1mHistMWUTempMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistMWUTempMin.setDescription("The minimum MWU temperature measured in this minute interval.")
sub10RadioStats1mHistMWUTempMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistMWUTempMax.setDescription("The maximum MWU temperature measured in this minute interval.")
sub10RadioStats1mHistMWUTempAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistMWUTempAvg.setDescription("The average MWU temperature measured in this minute interval.")
sub10RadioStats1mHistES = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistES.setDescription("The number of errored seconds detected on the Radio interface\nmeasured in this minute interval.")
sub10RadioStats1mHistSES = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistSES.setDescription("The number of severely errored seconds detected on the Radio interface\nmeasured in this minute interval.")
sub10RadioStats1mHistBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistBBE.setDescription("The number of errored blocks on the Radio interface\nmeasured in this minute interval.")
sub10RadioStats1mHistUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistUAS.setDescription("The number of unavailable seconds detected on the Radio interface\nmeasured in this minute interval.")
sub10RadioStats1mHistRxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxFrms.setDescription("The number of Airside frames received over the Radio interface in this minute.\nThis is irrespective of whether the Airside frame transmitted contained\nany ethernet data.")
sub10RadioStats1mHistTxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxFrms.setDescription("The number of Airside frames transmitted over the Radio interface in this minute.\nThis is irrespective of whether the Airside frame transmitted contained\nany ethernet data.")
sub10RadioStats1mHistRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxPkts.setDescription("The number of Ethernet packets received over the Radio interface in this minute.\nThis includes all packets whether destined for the management\nsub-system on this unit or to be sent direct to the Ethernet interface.")
sub10RadioStats1mHistTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxPkts.setDescription("The number of Ethernet packets transmitted over the Radio interface\nwhich originated from the Ethernet interface in this minute. This does not include\npackets originating from the management sub-system.")
sub10RadioStats1mHistRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxMgmtPkts.setDescription("The number of Ethernet packets received over the Radio interface  in this minute\nand which are destined for the management sub-system on this unit.")
sub10RadioStats1mHistTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistTxMgmtPkts.setDescription("The number of Ethernet packets transmitted over the Radio interface\nwhich originated from the management sub-system  in this minute.\nThis does not include packets originating from the Ethernet interface.")
sub10RadioStats1mHistRxBadFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1mHistRxBadFrms.setDescription("The count of bad frames detected on the\nreceive side of the Radio interface in this minute.")
sub10RadioStats15mHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2))
sub10RadioStats15mHistIntvls = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistIntvls.setDescription("The number of valid table entries in sub10RadioStats15mHistTable\non this system. There is one entry per 15 minute interval.\nIf the unit has been running for a minimum of 24 hours\nand collecting valid data then the number of entries will be 96,\nthis represents a total maximum of 24 hours worth of data.")
sub10RadioStats15mHistTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2))
if mibBuilder.loadTexts: sub10RadioStats15mHistTable.setDescription("This table maintains a history of Radio statistics\nbased on 15 minute intervals. There are a maximum\nof 96 intervals which represent 24 hours of data.\n\nThis table along with the 1m and 1d tables provide a\nhistory of the performance of the radio interface. This\ninformation may then be post processed and used as a\ntroubleshooting tool.\n\nAn entry in the table represents a 15 minute interval\nwhere each interval is synchronised to the clock on the\nhour. There are up to 96 intervals starting at 1. The\nnumber of valid entries in the table is given by the value\nof sub10RadioStats15mHistIntvls of which the minimum\nis 0 and the maximum is 96 therefore providing\nup to a maximum of 24 hours of 15 minute interval data.\n\nThe first entry indexed by 1 represents the most recent\ncompleted 15 minute interval. At the end of each interval\nall entries of 'index' are copied into entry 'index+1'. If the\nnumber of valid intervals is 96 then the least recent interval\nentry is summarised into 24 hour stats and then discarded.")
sub10RadioStats15mHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10RadioStats15mHistIntvl"))
if mibBuilder.loadTexts: sub10RadioStats15mHistEntry.setDescription("An entry in the sub10RadioStats15mHistTable.\nEach entry represents 15 minutes performance\nmanagement data where the first entry with index=1\nis the most recent 15 minute interval and the last\nentry with index=n (up to 96) is the least recent\n15 minute interval. The number of valid intervals\nis sub10RadioStats15mHistIntvls.")
sub10RadioStats15mHistIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10RadioStats15mHistIntvl.setDescription("The interval number used as an index to this\ntable. Interval numbers start at 1 (the most\nrecent 15 minute interval) and have a maximum value of 96\n(the least recent 15 minute interval).")
sub10RadioStats15mHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 2), Sub10DateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioStats15mHistTime.setDescription("The local system time when this 15m history entry was created.\nThis represents the end of the 15 minute interval for which the\nassociated stats with the same sub10RadioStats15mHistIntvl\ntable index are relevant.")
sub10RadioStats15mHistTxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPowerMin.setDescription("The minimum value that the transmit power of the local radio\nlink has reached in this 15 minute interval, measured in dBm.")
sub10RadioStats15mHistTxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPowerMax.setDescription("The maximum value that the transmit power of the local radio\nlink has reached in this 15 minute interval, measured in dBm.")
sub10RadioStats15mHistTxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPowerAvg.setDescription("The average value that the transmit power of the local radio\nlink has reached in this 15 minute interval, measured in dBm.")
sub10RadioStats15mHistRxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPowerMin.setDescription("The minimum value that the receive power of the local radio\nlink has reached in this 15 minute interval, measured in dBm.")
sub10RadioStats15mHistRxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPowerMax.setDescription("The maximum value that the receive power of the local radio\nlink has reached in this 15 minute interval, measured in dBm.")
sub10RadioStats15mHistRxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPowerAvg.setDescription("The average value that the receive power of the local radio\nlink has reached in this 15 minute interval, measured in dBm.")
sub10RadioStats15mHistVectErrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistVectErrMin.setDescription("The minimum value that the vector error of the local radio\nlink has reached in this 15 minute interval, measured in dB.")
sub10RadioStats15mHistVectErrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistVectErrMax.setDescription("The maximum value that the vector error of the local radio\nlink has reached in this 15 minute interval, measured in dB.")
sub10RadioStats15mHistVectErrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistVectErrAvg.setDescription("The average value that the vector error of the local radio\nlink has reached in this 15 minute interval, measured in dB.")
sub10RadioStats15mHistLnkLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistLnkLossMin.setDescription("The minimum value that the link loss of the local radio\nlink has reached in this 15 minute interval, measured in dB.")
sub10RadioStats15mHistLnkLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistLnkLossMax.setDescription("The maximum value that the link loss of the local radio\nlink has reached in this 15 minute interval, measured in dB.")
sub10RadioStats15mHistLnkLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistLnkLossAvg.setDescription("The average value that the link loss of the local radio\nlink has reached in this 15 minute interval, measured in dB.")
sub10RadioStats15mHistMWUTempMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistMWUTempMin.setDescription("The minimum MWU temperature measured in this 15 minute interval.")
sub10RadioStats15mHistMWUTempMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistMWUTempMax.setDescription("The maximum MWU temperature measured in this 15 minute interval.")
sub10RadioStats15mHistMWUTempAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistMWUTempAvg.setDescription("The average MWU temperature measured in this 15 minute interval.")
sub10RadioStats15mHistES = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistES.setDescription("The number of errored seconds detected on the Radio interface\nmeasured in this 15 minute interval.")
sub10RadioStats15mHistSES = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistSES.setDescription("The number of severely errored seconds detected on the Radio interface\nmeasured in this 15 minute interval.")
sub10RadioStats15mHistBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistBBE.setDescription("The number of errored blocks on the Radio interface\nmeasured in this 15 minute interval.")
sub10RadioStats15mHistUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistUAS.setDescription("The number of unavailable seconds detected on the Radio interface\nmeasured in this 15 minute interval.")
sub10RadioStats15mHistRxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxFrms.setDescription("The number of Airside frames received over the Radio interface in this 15 minutes.\nThis is irrespective of whether the Airside frame transmitted contained\nany ethernet data.")
sub10RadioStats15mHistTxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxFrms.setDescription("The number of Airside frames transmitted over the Radio interface in this 15 minutes.\nThis is irrespective of whether the Airside frame transmitted contained\nany ethernet data.")
sub10RadioStats15mHistRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxPkts.setDescription("The number of Ethernet packets received over the Radio interface in this 15 minutes.\nThis includes all packets whether destined for the management\nsub-system on this unit or to be sent direct to the Ethernet interface.")
sub10RadioStats15mHistTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxPkts.setDescription("The number of Ethernet packets transmitted over the Radio interface\nwhich originated from the Ethernet interface in this 15 minutes. This does not include\npackets originating from the management sub-system.")
sub10RadioStats15mHistRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxMgmtPkts.setDescription("The number of Ethernet packets received over the Radio interface  in this 15 minutes\nand which are destined for the management sub-system on this unit.")
sub10RadioStats15mHistTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistTxMgmtPkts.setDescription("The number of Ethernet packets transmitted over the Radio interface\nwhich originated from the management sub-system  in this 15 minutes.\nThis does not include packets originating from the Ethernet interface.")
sub10RadioStats15mHistRxBadFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats15mHistRxBadFrms.setDescription("The count of bad frames detected on the\nreceive side of the Radio interface in this 15 minutes.")
sub10RadioStats1dHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3))
sub10RadioStats1dHistIntvls = MibScalar((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistIntvls.setDescription("The number of valid table entries in sub10RadioStats1dHistTable\non this system. There is one entry per 1 day interval.\n\nIf the unit has been running for a minimum  of 30 days\nand collecting valid data then the number of entries will be 30,\nthis represents a total maximum of 30 days worth of data.")
sub10RadioStats1dHistTable = MibTable((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2))
if mibBuilder.loadTexts: sub10RadioStats1dHistTable.setDescription("This table maintains a history of Radio statistics\nbased on 1 day intervals. There are a maximum\nof 30 intervals which represent 30 days of data.\n\nThis table along with the 1m and 15m tables provide a\nhistory of the performance of the radio interface. This\ninformation may then be post processed and used as a\ntroubleshooting tool.\n\nAn entry in the table represents a 1 day interval\nwhere each interval is synchronised to the clock on the\nhour. There are up to 30 intervals starting at 1. The\nnumber of valid entries in the table is given by the value\nof sub10RadioStats1dHistIntvls of which the minimum\nis 0 and the maximum is 30 therefore providing\nup to a maximum of 30 days of 1 day interval data.\n\nThe first entry indexed by 1 represents the most recent\ncompleted 1 day interval. At the end of each interval\nall entries of 'index' are copied into entry 'index+1'. If the\nnumber of valid intervals is 30 then the least recent interval\nentry is discarded.")
sub10RadioStats1dHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1)).setIndexNames((0, "SUB10SYSTEMS-MIB", "sub10RadioStats1dHistIntvl"))
if mibBuilder.loadTexts: sub10RadioStats1dHistEntry.setDescription("An entry in the sub10RadioStats1dHistTable.\nEach entry represents 1 day of performance\nmanagement data where the first entry with index=1\nis the most recent 1 day interval and the last\nentry with index=n (up to 30) is the least recent\n1 day interval.\n\nThe number of valid intervals is given by the\nvalue of sub10RadioStats1dHistIntvls.")
sub10RadioStats1dHistIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sub10RadioStats1dHistIntvl.setDescription("The interval number used as an index to this\ntable. Interval numbers start at 1 (the most\nrecent 1 day interval) and have a maximum value of 24\n(the least recent 1 day interval).")
sub10RadioStats1dHistTime = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 2), Sub10DateTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sub10RadioStats1dHistTime.setDescription("The local system time when this 1d history entry was created.\nThis represents the end of the 1 day interval for which the\nassociated stats with the same sub10RadioStats1dHistIntvl\ntable index are relevant.")
sub10RadioStats1dHistTxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPowerMin.setDescription("The minimum value that the transmit power of the local radio\nlink has reached in this day interval, measured in dBm.")
sub10RadioStats1dHistTxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPowerMax.setDescription("The maximum value that the transmit power of the local radio\nlink has reached in this day interval, measured in dBm.")
sub10RadioStats1dHistTxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPowerAvg.setDescription("The average value that the transmit power of the local radio\nlink has reached in this day interval, measured in dBm.")
sub10RadioStats1dHistRxPowerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPowerMin.setDescription("The minimum value that the receive power of the local radio\nlink has reached in this day interval, measured in dBm.")
sub10RadioStats1dHistRxPowerMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPowerMax.setDescription("The maximum value that the receive power of the local radio\nlink has reached in this day interval, measured in dBm.")
sub10RadioStats1dHistRxPowerAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPowerAvg.setDescription("The average value that the receive power of the local radio\nlink has reached in this day interval, measured in dBm.")
sub10RadioStats1dHistVectErrMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistVectErrMin.setDescription("The minimum value that the vector error of the local radio\nlink has reached in this day interval, measured in dB.")
sub10RadioStats1dHistVectErrMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistVectErrMax.setDescription("The maximum value that the vector error of the local radio\nlink has reached in this day interval, measured in dB.")
sub10RadioStats1dHistVectErrAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistVectErrAvg.setDescription("The average value that the vector error of the local radio\nlink has reached in this day interval, measured in dB.")
sub10RadioStats1dHistLnkLossMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistLnkLossMin.setDescription("The minimum value that the link loss of the local radio\nlink has reached in this day interval, measured in dB.")
sub10RadioStats1dHistLnkLossMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistLnkLossMax.setDescription("The maximum value that the link loss of the local radio\nlink has reached in this day interval, measured in dB.")
sub10RadioStats1dHistLnkLossAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistLnkLossAvg.setDescription("The average value that the link loss of the local radio\nlink has reached in this day interval, measured in dB.")
sub10RadioStats1dHistMWUTempMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistMWUTempMin.setDescription("The minimum MWU temperature measured in this day interval.")
sub10RadioStats1dHistMWUTempMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistMWUTempMax.setDescription("The maximum MWU temperature measured in this day interval.")
sub10RadioStats1dHistMWUTempAvg = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100)).clone(0)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistMWUTempAvg.setDescription("The average MWU temperature measured in this day interval.")
sub10RadioStats1dHistES = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistES.setDescription("The number of errored seconds detected on the Radio interface\nmeasured in this day interval.")
sub10RadioStats1dHistSES = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistSES.setDescription("The number of severely errored seconds detected on the Radio interface\nmeasured in this day interval.")
sub10RadioStats1dHistBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistBBE.setDescription("The number of errored blocks on the Radio interface\nmeasured in this day interval.")
sub10RadioStats1dHistUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistUAS.setDescription("The number of unavailable seconds detected on the Radio interface\nmeasured in this day interval.")
sub10RadioStats1dHistRxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxFrms.setDescription("The number of Airside frames received over the Radio interface in this day interval.\nThis is irrespective of whether the Airside frame transmitted contained\nany ethernet data.")
sub10RadioStats1dHistTxFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxFrms.setDescription("The number of Airside frames transmitted over the Radio interface in this day interval.\nThis is irrespective of whether the Airside frame transmitted contained\nany ethernet data.")
sub10RadioStats1dHistRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxPkts.setDescription("The number of Ethernet packets received over the Radio interface in this day interval.\nThis includes all packets whether destined for the management\nsub-system on this unit or to be sent direct to the Ethernet interface.")
sub10RadioStats1dHistTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxPkts.setDescription("The number of Ethernet packets transmitted over the Radio interface\nwhich originated from the Ethernet interface in this day interval. This does not include\npackets originating from the management sub-system.")
sub10RadioStats1dHistRxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxMgmtPkts.setDescription("The number of Ethernet packets received over the Radio interface  in this day interval\nand which are destined for the management sub-system on this unit.")
sub10RadioStats1dHistTxMgmtPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistTxMgmtPkts.setDescription("The number of Ethernet packets transmitted over the Radio interface\nwhich originated from the management sub-system  in this day interval.\nThis does not include packets originating from the Ethernet interface.")
sub10RadioStats1dHistRxBadFrms = MibTableColumn((1, 3, 6, 1, 4, 1, 39003, 5, 3, 3, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RadioStats1dHistRxBadFrms.setDescription("The count of bad frames detected on the\nreceive side of the Radio interface in this day interval.")
sub10MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 20))
sub10MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 20, 1))
sub10MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 20, 2))

# Augmentions

# Notifications

sub10UnitAlarm = NotificationType((1, 3, 6, 1, 4, 1, 39003, 0, 1)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObject"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearThresh"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmSeverity"), ("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmState"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseThresh"), ) )
if mibBuilder.loadTexts: sub10UnitAlarm.setDescription("A measured object relating the Unit subsystem has been raised or cleared according\nto the configured thresholds. For alarm configuration see sub10UnitMgmtAlarmTable.")
sub10EthernetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 39003, 0, 2)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObject"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearThresh"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmSeverity"), ("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmState"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseThresh"), ) )
if mibBuilder.loadTexts: sub10EthernetAlarm.setDescription("A measured object relating the Ethernet subsystem has been raised or cleared according\nto the configured thresholds. For alarm configuration see sub10UnitMgmtAlarmTable.")
sub10RadioAlarm = NotificationType((1, 3, 6, 1, 4, 1, 39003, 0, 3)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObject"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearThresh"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmSeverity"), ("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmState"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseThresh"), ) )
if mibBuilder.loadTexts: sub10RadioAlarm.setDescription("A measured object relating the Radio subsystem has been raised or cleared according\nto the configured thresholds. For alarm configuration see sub10UnitMgmtAlarmTable.")

# Groups

sub10NotificationsGrp = NotificationGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 1)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthernetAlarm"), ("SUB10SYSTEMS-MIB", "sub10UnitAlarm"), ("SUB10SYSTEMS-MIB", "sub10RadioAlarm"), ) )
if mibBuilder.loadTexts: sub10NotificationsGrp.setDescription("This group defines objects that are members of the sub10NotificationsGrp group")
sub10UnitLocalStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 2)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitLclIpAddress"), ("SUB10SYSTEMS-MIB", "sub10UnitLclTerminalName"), ("SUB10SYSTEMS-MIB", "sub10UnitLclTime"), ("SUB10SYSTEMS-MIB", "sub10UnitLclNTPSyncStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitLclLinkName"), ("SUB10SYSTEMS-MIB", "sub10UnitLclFirmwareLoadedBank"), ("SUB10SYSTEMS-MIB", "sub10UnitLclFPGAVersion"), ("SUB10SYSTEMS-MIB", "sub10UnitLclFirmwareVersion"), ("SUB10SYSTEMS-MIB", "sub10UnitLclMWUType"), ("SUB10SYSTEMS-MIB", "sub10UnitLclUnitType"), ("SUB10SYSTEMS-MIB", "sub10UnitLclRadioDataRate"), ("SUB10SYSTEMS-MIB", "sub10UnitLclMWUTemperature"), ("SUB10SYSTEMS-MIB", "sub10UnitLclSiteName"), ("SUB10SYSTEMS-MIB", "sub10UnitLclHWSerialNumber"), ("SUB10SYSTEMS-MIB", "sub10UnitLclTerminalType"), ("SUB10SYSTEMS-MIB", "sub10UnitLclDescription"), ("SUB10SYSTEMS-MIB", "sub10UnitLclLinkId"), ) )
if mibBuilder.loadTexts: sub10UnitLocalStatusGrp.setDescription("This group defines objects that are members of the sub10UnitLocalStatusGrp group")
sub10UnitLclAlarmStateEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 3)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmState"), ("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmStateTime"), ) )
if mibBuilder.loadTexts: sub10UnitLclAlarmStateEntryGrp.setDescription("This group defines objects that are members of the sub10UnitLclAlarmStateEntryGrp group")
sub10UnitRemoteStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 4)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitRmtTerminalType"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtHWSerialNumber"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtFirmwareVersion"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtLinkId"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtUnitType"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtIpAddress"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtTerminalName"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtTime"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtLinkName"), ("SUB10SYSTEMS-MIB", "sub10UnitRmtMWUTemperature"), ) )
if mibBuilder.loadTexts: sub10UnitRemoteStatusGrp.setDescription("This group defines objects that are members of the sub10UnitRemoteStatusGrp group")
sub10UnitMgmtSystemGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 5)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtTerminalName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtLinkId"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtLinkName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSiteName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtContactName"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtSystemGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtSystemGrp group")
sub10UnitMgmtIpGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 6)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpDefGateway"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpMode"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpAddress"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpSubnetMask"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpDHCP"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtIpGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtIpGrp group")
sub10UnitMgmtVlanGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 7)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanDSCP"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanPriority"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanId"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanState"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanDEI"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtVlanGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtVlanGrp group")
sub10UnitMgmtUsersGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 8)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtUsersNumber"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtUsersGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtUsersGrp group")
sub10UnitMgmtUserEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 9)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserGroup"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserRowStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserPasswordVerify"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserPassword"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtUserEntryGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtUserEntryGrp group")
sub10UnitMgmtTimeGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 10)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeLocal"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeNTPServer1"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeNTPPort"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeNTPServer2"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeNTPEnabled"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtDateTime"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeNTPSyncStatus"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtTimeGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtTimeGrp group")
sub10UnitMgmtAlarmEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 11)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmToSyslog"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearIntvls"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmSmtpAddress"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseThresh"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmName"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRowStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMonitorIntvl"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmNotification"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmMeasObject"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearThresh"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmRaiseIntvls"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmClearOper"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmSeverity"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtAlarmEntryGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtAlarmEntryGrp group")
sub10UnitMgmtSnmpGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 12)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpv3"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpAgent"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTraps"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpv320Mib"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtSnmpGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtSnmpGrp group")
sub10UnitMgmtSnmpTrpDstEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 13)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTrpDstRowStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTrpDstIpAddr"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTrpDstCommunity"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtSnmpTrpDstEntryGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtSnmpTrpDstEntryGrp group")
sub10UnitMgmtFirmwareGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 14)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareLoadedBank"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareAction"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareVersion"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareSelectBank"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareBootVersion"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtFirmwareGrp group")
sub10UnitMgmtFirmwareBankEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 15)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareBankImage"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareBankVersion"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtFirmwareBankEntryGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtFirmwareBankEntryGrp group")
sub10UnitMgmtDNSEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 16)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtDNServer"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtDNSEntryGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtDNSEntryGrp group")
sub10UnitMgmtEncryptionGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 17)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtEncryptMode"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtEncryptKey"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtEncryptionGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtEncryptionGrp group")
sub10UnitMgmtLicenseGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 18)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtLicenseKey"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtLicenseAES"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtLicenseGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtLicenseGrp group")
sub10UnitMgmtSyncEGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 19)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtSyncEMode"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtSyncEGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtSyncEGrp group")
sub10UnitMgmtActionsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 20)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10UnitMgmtTransaction"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTransactionStatus"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtResetAction"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTransactionMode"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtRollbackTimeout"), ) )
if mibBuilder.loadTexts: sub10UnitMgmtActionsGrp.setDescription("This group defines objects that are members of the sub10UnitMgmtActionsGrp group")
sub10EthernetLocalStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 21)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthLclLinkStatus"), ("SUB10SYSTEMS-MIB", "sub10EthLclMacAddress"), ("SUB10SYSTEMS-MIB", "sub10EthLclDuplex"), ("SUB10SYSTEMS-MIB", "sub10EthLclSpeed"), ("SUB10SYSTEMS-MIB", "sub10EthLclMDI"), ) )
if mibBuilder.loadTexts: sub10EthernetLocalStatusGrp.setDescription("This group defines objects that are members of the sub10EthernetLocalStatusGrp group")
sub10EthernetRemoteStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 22)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthRmtSpeed"), ("SUB10SYSTEMS-MIB", "sub10EthRmtDuplex"), ("SUB10SYSTEMS-MIB", "sub10EthRmtMDI"), ("SUB10SYSTEMS-MIB", "sub10EthRmtLinkStatus"), ("SUB10SYSTEMS-MIB", "sub10EthRmtMacAddress"), ) )
if mibBuilder.loadTexts: sub10EthernetRemoteStatusGrp.setDescription("This group defines objects that are members of the sub10EthernetRemoteStatusGrp group")
sub10EthMgmtPhyGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 23)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthMgmtPhyAutoNeg"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtPhyMDI"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtPhyDuplex"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtPhySpeed"), ) )
if mibBuilder.loadTexts: sub10EthMgmtPhyGrp.setDescription("This group defines objects that are members of the sub10EthMgmtPhyGrp group")
sub10EthMgmtVlanGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 24)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanFiltering"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanDefaultDEI"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanDefaultEnabled"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanDefaultId"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanEgressAction"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanDefaultPriority"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanIngressAction"), ) )
if mibBuilder.loadTexts: sub10EthMgmtVlanGrp.setDescription("This group defines objects that are members of the sub10EthMgmtVlanGrp group")
sub10EthMgmtVlanAllowedEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 25)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanAllowedId"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanAllowedRowStatus"), ) )
if mibBuilder.loadTexts: sub10EthMgmtVlanAllowedEntryGrp.setDescription("This group defines objects that are members of the sub10EthMgmtVlanAllowedEntryGrp group")
sub10EthMgmtQoSGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 26)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMPLSMappingNumber"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSUntaggedQueue"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMode"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSState"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSVlanMappingNumber"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSDSCPMappingNumber"), ) )
if mibBuilder.loadTexts: sub10EthMgmtQoSGrp.setDescription("This group defines objects that are members of the sub10EthMgmtQoSGrp group")
sub10EthMgmtQoSQEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 27)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQSchedulingType"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQCongestionPolicy"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQSizeMax"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQDWRRWeight"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQLen"), ) )
if mibBuilder.loadTexts: sub10EthMgmtQoSQEntryGrp.setDescription("This group defines objects that are members of the sub10EthMgmtQoSQEntryGrp group")
sub10EthMgmtQoSVlanEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 28)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSVlanQueue"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSVlanId"), ) )
if mibBuilder.loadTexts: sub10EthMgmtQoSVlanEntryGrp.setDescription("This group defines objects that are members of the sub10EthMgmtQoSVlanEntryGrp group")
sub10EthMgmtQoSPCPEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 29)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSPCPQueue"), ) )
if mibBuilder.loadTexts: sub10EthMgmtQoSPCPEntryGrp.setDescription("This group defines objects that are members of the sub10EthMgmtQoSPCPEntryGrp group")
sub10EthMgmtQoSDSCPEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 30)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSDSCPMarking"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSDSCPQueue"), ) )
if mibBuilder.loadTexts: sub10EthMgmtQoSDSCPEntryGrp.setDescription("This group defines objects that are members of the sub10EthMgmtQoSDSCPEntryGrp group")
sub10EthMgmtQoSMPLSEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 31)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMPLSQueue"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMPLSTrafficClass"), ) )
if mibBuilder.loadTexts: sub10EthMgmtQoSMPLSEntryGrp.setDescription("This group defines objects that are members of the sub10EthMgmtQoSMPLSEntryGrp group")
sub10EthMgmtStatsActiveEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 32)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthMgmtStatsActiveName"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtStatsActiveState"), ) )
if mibBuilder.loadTexts: sub10EthMgmtStatsActiveEntryGrp.setDescription("This group defines objects that are members of the sub10EthMgmtStatsActiveEntryGrp group")
sub10EthernetStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 33)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthStatsTimeElapsed"), ) )
if mibBuilder.loadTexts: sub10EthernetStatsGrp.setDescription("This group defines objects that are members of the sub10EthernetStatsGrp group")
sub10EthernetStatsCurrentGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 34)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxFragments"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxUndersized"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts1024TMax"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts512T1023"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts128T255"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxExsvCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts64Octets"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxLtCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxOversized"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxSOFOvrns"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxMlplCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts65T127"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxCRCErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxSnglCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxCSenseErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxAlignErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxJabberFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrRxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrTxDeferred"), ("SUB10SYSTEMS-MIB", "sub10EthStatsCurrPkts256T511"), ) )
if mibBuilder.loadTexts: sub10EthernetStatsCurrentGrp.setDescription("This group defines objects that are members of the sub10EthernetStatsCurrentGrp group")
sub10EthernetStats15mHistoryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 35)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthStats15mHistIntvls"), ) )
if mibBuilder.loadTexts: sub10EthernetStats15mHistoryGrp.setDescription("This group defines objects that are members of the sub10EthernetStats15mHistoryGrp group")
sub10EthStats15mHistEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 36)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts256T511"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts64Octets"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxAlignErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts512T1023"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTime"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxCRCErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxLtCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxJabberFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxExsvCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxSnglCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxMlplCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts65T127"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxUndersized"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts1024TMax"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistPkts128T255"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxCSenseErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxSOFOvrns"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxOversized"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxDeferred"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistRxFragments"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats15mHistTxGoodFrms"), ) )
if mibBuilder.loadTexts: sub10EthStats15mHistEntryGrp.setDescription("This group defines objects that are members of the sub10EthStats15mHistEntryGrp group")
sub10EthStats1dHistoryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 37)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthStats1dHistIntvls"), ) )
if mibBuilder.loadTexts: sub10EthStats1dHistoryGrp.setDescription("This group defines objects that are members of the sub10EthStats1dHistoryGrp group")
sub10EthStats1dHistEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 38)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts1024TMax"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts64Octets"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxCSenseErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxMlplCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxSOFOvrns"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxDeferred"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxSnglCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxPauseFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxFragments"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxUndersized"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxOversized"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTime"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts512T1023"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxExsvCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxJabberFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxCRCErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts128T255"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts256T511"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxBcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxMcastFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxOctets"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistTxLtCollsn"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxAlignErrs"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistRxGoodFrms"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistPkts65T127"), ) )
if mibBuilder.loadTexts: sub10EthStats1dHistEntryGrp.setDescription("This group defines objects that are members of the sub10EthStats1dHistEntryGrp group")
sub10RadioLocalStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 39)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioLclRxPower"), ("SUB10SYSTEMS-MIB", "sub10RadioLclVectErr"), ("SUB10SYSTEMS-MIB", "sub10RadioLclAlignmentMode"), ("SUB10SYSTEMS-MIB", "sub10RadioLclMWUType"), ("SUB10SYSTEMS-MIB", "sub10RadioLclLnkLoss"), ("SUB10SYSTEMS-MIB", "sub10RadioLclLinkStatus"), ("SUB10SYSTEMS-MIB", "sub10RadioLclDataRate"), ("SUB10SYSTEMS-MIB", "sub10RadioLclTxPower"), ) )
if mibBuilder.loadTexts: sub10RadioLocalStatusGrp.setDescription("This group defines objects that are members of the sub10RadioLocalStatusGrp group")
sub10RadioRemoteStatusGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 40)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioRmtRxPower"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtAlignmentMode"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtLinkStatus"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtVectErr"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtLnkLoss"), ("SUB10SYSTEMS-MIB", "sub10RadioRmtTxPower"), ) )
if mibBuilder.loadTexts: sub10RadioRemoteStatusGrp.setDescription("This group defines objects that are members of the sub10RadioRemoteStatusGrp group")
sub10RadioMgmtGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 41)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioMgmtTxPowerLimit"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtMWUChannelWidth"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtAlignmentMode"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtAPCMode"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtModulationMode"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtTxRxFreq"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtAmod"), ) )
if mibBuilder.loadTexts: sub10RadioMgmtGrp.setDescription("This group defines objects that are members of the sub10RadioMgmtGrp group")
sub10RadioMgmtStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 42)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioMgmtStats1dPersist"), ) )
if mibBuilder.loadTexts: sub10RadioMgmtStatsGrp.setDescription("This group defines objects that are members of the sub10RadioMgmtStatsGrp group")
sub10RadioMgmtStatsActiveEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 43)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioMgmtStatsActiveState"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtStatsActiveName"), ) )
if mibBuilder.loadTexts: sub10RadioMgmtStatsActiveEntryGrp.setDescription("This group defines objects that are members of the sub10RadioMgmtStatsActiveEntryGrp group")
sub10RadioStatsGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 44)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioStatsTimeElapsed"), ) )
if mibBuilder.loadTexts: sub10RadioStatsGrp.setDescription("This group defines objects that are members of the sub10RadioStatsGrp group")
sub10RadioStatsCurrentGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 45)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxBadFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrLnkLossMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrLnkLossAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrMWUTempMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrSES"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrVectErrAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrLnkLossMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrRxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrES"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrVectErrMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrUAS"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrBBE"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrMWUTempAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrTxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrMWUTempMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrVectErrMax"), ) )
if mibBuilder.loadTexts: sub10RadioStatsCurrentGrp.setDescription("This group defines objects that are members of the sub10RadioStatsCurrentGrp group")
sub10RadioStats1mHistoryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 46)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistIntvls"), ) )
if mibBuilder.loadTexts: sub10RadioStats1mHistoryGrp.setDescription("This group defines objects that are members of the sub10RadioStats1mHistoryGrp group")
sub10RadioStats1mHistEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 47)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistUAS"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistVectErrMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTime"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistSES"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistTxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistVectErrAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistBBE"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistMWUTempMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistMWUTempMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistLnkLossMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistVectErrMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistLnkLossMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistLnkLossAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistMWUTempAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistES"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistRxBadFrms"), ) )
if mibBuilder.loadTexts: sub10RadioStats1mHistEntryGrp.setDescription("This group defines objects that are members of the sub10RadioStats1mHistEntryGrp group")
sub10RadioStats15mHistoryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 48)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistIntvls"), ) )
if mibBuilder.loadTexts: sub10RadioStats15mHistoryGrp.setDescription("This group defines objects that are members of the sub10RadioStats15mHistoryGrp group")
sub10RadioStats15mHistEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 49)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistLnkLossAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistLnkLossMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistMWUTempMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistVectErrMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxBadFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistVectErrAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistLnkLossMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistES"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistSES"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistTime"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistUAS"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistVectErrMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistRxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistMWUTempAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistMWUTempMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistBBE"), ) )
if mibBuilder.loadTexts: sub10RadioStats15mHistEntryGrp.setDescription("This group defines objects that are members of the sub10RadioStats15mHistEntryGrp group")
sub10RadioStats1dHistoryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 50)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistIntvls"), ) )
if mibBuilder.loadTexts: sub10RadioStats1dHistoryGrp.setDescription("This group defines objects that are members of the sub10RadioStats1dHistoryGrp group")
sub10RadioStats1dHistEntryGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 39003, 20, 2, 51)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistMWUTempAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistBBE"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxPowerAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistLnkLossAvg"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxBadFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistES"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxMgmtPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistMWUTempMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistVectErrMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistMWUTempMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistUAS"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistLnkLossMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistVectErrMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistLnkLossMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxPowerMin"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxPkts"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistRxFrms"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTxPowerMax"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistSES"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistTime"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistVectErrAvg"), ) )
if mibBuilder.loadTexts: sub10RadioStats1dHistEntryGrp.setDescription("This group defines objects that are members of the sub10RadioStats1dHistEntryGrp group")

# Compliances

sub10Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 39003, 20, 1, 1)).setObjects(*(("SUB10SYSTEMS-MIB", "sub10EthStats15mHistEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUserEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtUsersGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSQEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareBankEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthernetRemoteStatusGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanAllowedEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioLocalStatusGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSDSCPEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioRemoteStatusGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtActionsGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtStatsActiveEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtTimeGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSyncEGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtEncryptionGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtAlarmEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtFirmwareGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistoryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtPhyGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtLicenseGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSystemGrp"), ("SUB10SYSTEMS-MIB", "sub10EthernetLocalStatusGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitLocalStatusGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats15mHistoryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitLclAlarmStateEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistoryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthStats1dHistEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStatsCurrentGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitRemoteStatusGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtStatsActiveEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthernetStatsGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtVlanGrp"), ("SUB10SYSTEMS-MIB", "sub10EthernetStats15mHistoryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioMgmtStatsGrp"), ("SUB10SYSTEMS-MIB", "sub10NotificationsGrp"), ("SUB10SYSTEMS-MIB", "sub10EthernetStatsCurrentGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtVlanGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSVlanEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1mHistoryGrp"), ("SUB10SYSTEMS-MIB", "sub10RadioStats1dHistEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSMPLSEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10EthMgmtQoSPCPEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtDNSEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtSnmpTrpDstEntryGrp"), ("SUB10SYSTEMS-MIB", "sub10UnitMgmtIpGrp"), ) )
if mibBuilder.loadTexts: sub10Compliance.setDescription("The compliance statement for Sub10 entities which implement the SUB10SYSTEMS-MIB.")

# Exports

# Module identity
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", PYSNMP_MODULE_ID=sub10Systems)

# Types
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", Sub10AlarmOperation=Sub10AlarmOperation, Sub10AlarmSeverity=Sub10AlarmSeverity, Sub10AlarmState=Sub10AlarmState, Sub10AlignmentMode=Sub10AlignmentMode, Sub10DateTime=Sub10DateTime, Sub10Duplex=Sub10Duplex, Sub10EntryStatus=Sub10EntryStatus, Sub10FirmwareBank=Sub10FirmwareBank, Sub10MDIType=Sub10MDIType, Sub10MWUType=Sub10MWUType, Sub10MacAddress=Sub10MacAddress, Sub10NTPSyncStatus=Sub10NTPSyncStatus, Sub10NotificationName=Sub10NotificationName, Sub10OperStatus=Sub10OperStatus, Sub10QoSQueue=Sub10QoSQueue, Sub10RadioDataRate=Sub10RadioDataRate, Sub10RadioLinkState=Sub10RadioLinkState, Sub10State=Sub10State, Sub10TerminalType=Sub10TerminalType, Sub10TxPowerLimit=Sub10TxPowerLimit, Sub10UnitType=Sub10UnitType, Sub10VlanId=Sub10VlanId, Sub10VlanPriority=Sub10VlanPriority, Sub10VlanTagAction=Sub10VlanTagAction)

# Objects
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", sub10Systems=sub10Systems, sub10Notifications=sub10Notifications, sub10Unit=sub10Unit, sub10UnitStatus=sub10UnitStatus, sub10UnitLocalStatus=sub10UnitLocalStatus, sub10UnitLclTime=sub10UnitLclTime, sub10UnitLclUnitType=sub10UnitLclUnitType, sub10UnitLclDescription=sub10UnitLclDescription, sub10UnitLclHWSerialNumber=sub10UnitLclHWSerialNumber, sub10UnitLclTerminalName=sub10UnitLclTerminalName, sub10UnitLclTerminalType=sub10UnitLclTerminalType, sub10UnitLclLinkName=sub10UnitLclLinkName, sub10UnitLclLinkId=sub10UnitLclLinkId, sub10UnitLclSiteName=sub10UnitLclSiteName, sub10UnitLclFirmwareLoadedBank=sub10UnitLclFirmwareLoadedBank, sub10UnitLclFirmwareVersion=sub10UnitLclFirmwareVersion, sub10UnitLclIpAddress=sub10UnitLclIpAddress, sub10UnitLclMWUTemperature=sub10UnitLclMWUTemperature, sub10UnitLclNTPSyncStatus=sub10UnitLclNTPSyncStatus, sub10UnitLclAlarmStateTable=sub10UnitLclAlarmStateTable, sub10UnitLclAlarmStateEntry=sub10UnitLclAlarmStateEntry, sub10UnitLclAlarmStateIndex=sub10UnitLclAlarmStateIndex, sub10UnitLclAlarmState=sub10UnitLclAlarmState, sub10UnitLclAlarmStateTime=sub10UnitLclAlarmStateTime, sub10UnitLclRadioDataRate=sub10UnitLclRadioDataRate, sub10UnitLclMWUType=sub10UnitLclMWUType, sub10UnitLclFPGAVersion=sub10UnitLclFPGAVersion, sub10UnitRemoteStatus=sub10UnitRemoteStatus, sub10UnitRmtUnitType=sub10UnitRmtUnitType, sub10UnitRmtTime=sub10UnitRmtTime, sub10UnitRmtTerminalName=sub10UnitRmtTerminalName, sub10UnitRmtTerminalType=sub10UnitRmtTerminalType, sub10UnitRmtLinkName=sub10UnitRmtLinkName, sub10UnitRmtLinkId=sub10UnitRmtLinkId, sub10UnitRmtHWSerialNumber=sub10UnitRmtHWSerialNumber, sub10UnitRmtFirmwareVersion=sub10UnitRmtFirmwareVersion, sub10UnitRmtIpAddress=sub10UnitRmtIpAddress, sub10UnitRmtMWUTemperature=sub10UnitRmtMWUTemperature, sub10UnitMgmt=sub10UnitMgmt, sub10UnitMgmtSystem=sub10UnitMgmtSystem, sub10UnitMgmtTerminalName=sub10UnitMgmtTerminalName, sub10UnitMgmtLinkName=sub10UnitMgmtLinkName, sub10UnitMgmtLinkId=sub10UnitMgmtLinkId, sub10UnitMgmtSiteName=sub10UnitMgmtSiteName, sub10UnitMgmtContactName=sub10UnitMgmtContactName, sub10UnitMgmtIp=sub10UnitMgmtIp, sub10UnitMgmtIpMode=sub10UnitMgmtIpMode, sub10UnitMgmtIpAddress=sub10UnitMgmtIpAddress, sub10UnitMgmtIpSubnetMask=sub10UnitMgmtIpSubnetMask, sub10UnitMgmtIpDefGateway=sub10UnitMgmtIpDefGateway, sub10UnitMgmtIpDHCP=sub10UnitMgmtIpDHCP, sub10UnitMgmtVlan=sub10UnitMgmtVlan, sub10UnitMgmtVlanState=sub10UnitMgmtVlanState, sub10UnitMgmtVlanId=sub10UnitMgmtVlanId, sub10UnitMgmtVlanPriority=sub10UnitMgmtVlanPriority, sub10UnitMgmtVlanDSCP=sub10UnitMgmtVlanDSCP, sub10UnitMgmtVlanDEI=sub10UnitMgmtVlanDEI, sub10UnitMgmtUsers=sub10UnitMgmtUsers, sub10UnitMgmtUsersNumber=sub10UnitMgmtUsersNumber, sub10UnitMgmtUserTable=sub10UnitMgmtUserTable, sub10UnitMgmtUserEntry=sub10UnitMgmtUserEntry, sub10UnitMgmtUserIndex=sub10UnitMgmtUserIndex, sub10UnitMgmtUserRowStatus=sub10UnitMgmtUserRowStatus, sub10UnitMgmtUserName=sub10UnitMgmtUserName, sub10UnitMgmtUserGroup=sub10UnitMgmtUserGroup, sub10UnitMgmtUserPassword=sub10UnitMgmtUserPassword, sub10UnitMgmtUserPasswordVerify=sub10UnitMgmtUserPasswordVerify, sub10UnitMgmtTime=sub10UnitMgmtTime, sub10UnitMgmtTimeLocal=sub10UnitMgmtTimeLocal, sub10UnitMgmtTimeNTPEnabled=sub10UnitMgmtTimeNTPEnabled, sub10UnitMgmtTimeNTPServer1=sub10UnitMgmtTimeNTPServer1, sub10UnitMgmtTimeNTPServer2=sub10UnitMgmtTimeNTPServer2, sub10UnitMgmtTimeNTPPort=sub10UnitMgmtTimeNTPPort, sub10UnitMgmtTimeNTPSyncStatus=sub10UnitMgmtTimeNTPSyncStatus, sub10UnitMgmtDateTime=sub10UnitMgmtDateTime, sub10UnitMgmtAlarms=sub10UnitMgmtAlarms, sub10UnitMgmtAlarmTable=sub10UnitMgmtAlarmTable, sub10UnitMgmtAlarmEntry=sub10UnitMgmtAlarmEntry, sub10UnitMgmtAlarmIndex=sub10UnitMgmtAlarmIndex, sub10UnitMgmtAlarmRowStatus=sub10UnitMgmtAlarmRowStatus, sub10UnitMgmtAlarmName=sub10UnitMgmtAlarmName, sub10UnitMgmtAlarmSeverity=sub10UnitMgmtAlarmSeverity, sub10UnitMgmtAlarmMeasObject=sub10UnitMgmtAlarmMeasObject, sub10UnitMgmtAlarmMonitorIntvl=sub10UnitMgmtAlarmMonitorIntvl, sub10UnitMgmtAlarmRaiseOper=sub10UnitMgmtAlarmRaiseOper, sub10UnitMgmtAlarmRaiseThresh=sub10UnitMgmtAlarmRaiseThresh, sub10UnitMgmtAlarmClearOper=sub10UnitMgmtAlarmClearOper, sub10UnitMgmtAlarmClearThresh=sub10UnitMgmtAlarmClearThresh, sub10UnitMgmtAlarmRaiseIntvls=sub10UnitMgmtAlarmRaiseIntvls, sub10UnitMgmtAlarmClearIntvls=sub10UnitMgmtAlarmClearIntvls, sub10UnitMgmtAlarmNotification=sub10UnitMgmtAlarmNotification, sub10UnitMgmtAlarmSmtpAddress=sub10UnitMgmtAlarmSmtpAddress, sub10UnitMgmtAlarmToSyslog=sub10UnitMgmtAlarmToSyslog, sub10UnitMgmtSnmp=sub10UnitMgmtSnmp, sub10UnitMgmtSnmpAgent=sub10UnitMgmtSnmpAgent, sub10UnitMgmtSnmpTraps=sub10UnitMgmtSnmpTraps, sub10UnitMgmtSnmpv320Mib=sub10UnitMgmtSnmpv320Mib, sub10UnitMgmtSnmpv3=sub10UnitMgmtSnmpv3, sub10UnitMgmtSnmpTrpDstTable=sub10UnitMgmtSnmpTrpDstTable, sub10UnitMgmtSnmpTrpDstEntry=sub10UnitMgmtSnmpTrpDstEntry, sub10UnitMgmtSnmpTrpDstIndex=sub10UnitMgmtSnmpTrpDstIndex, sub10UnitMgmtSnmpTrpDstRowStatus=sub10UnitMgmtSnmpTrpDstRowStatus, sub10UnitMgmtSnmpTrpDstIpAddr=sub10UnitMgmtSnmpTrpDstIpAddr, sub10UnitMgmtSnmpTrpDstCommunity=sub10UnitMgmtSnmpTrpDstCommunity, sub10UnitMgmtSmtp=sub10UnitMgmtSmtp, sub10UnitMgmtFirmware=sub10UnitMgmtFirmware, sub10UnitMgmtFirmwareSelectBank=sub10UnitMgmtFirmwareSelectBank, sub10UnitMgmtFirmwareLoadedBank=sub10UnitMgmtFirmwareLoadedBank, sub10UnitMgmtFirmwareVersion=sub10UnitMgmtFirmwareVersion, sub10UnitMgmtFirmwareBootVersion=sub10UnitMgmtFirmwareBootVersion, sub10UnitMgmtFirmwareAction=sub10UnitMgmtFirmwareAction, sub10UnitMgmtFirmwareBankTable=sub10UnitMgmtFirmwareBankTable, sub10UnitMgmtFirmwareBankEntry=sub10UnitMgmtFirmwareBankEntry, sub10UnitMgmtFirmwareBankIndex=sub10UnitMgmtFirmwareBankIndex, sub10UnitMgmtFirmwareBankVersion=sub10UnitMgmtFirmwareBankVersion, sub10UnitMgmtFirmwareBankImage=sub10UnitMgmtFirmwareBankImage, sub10UnitMgmtDNS=sub10UnitMgmtDNS, sub10UnitMgmtDNSTable=sub10UnitMgmtDNSTable, sub10UnitMgmtDNSEntry=sub10UnitMgmtDNSEntry, sub10UnitMgmtDNSIndex=sub10UnitMgmtDNSIndex, sub10UnitMgmtDNServer=sub10UnitMgmtDNServer, sub10UnitMgmtEncryption=sub10UnitMgmtEncryption, sub10UnitMgmtEncryptMode=sub10UnitMgmtEncryptMode, sub10UnitMgmtEncryptKey=sub10UnitMgmtEncryptKey, sub10UnitMgmtLicense=sub10UnitMgmtLicense, sub10UnitMgmtLicenseKey=sub10UnitMgmtLicenseKey)
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", sub10UnitMgmtLicenseAES=sub10UnitMgmtLicenseAES, sub10UnitMgmtSyncE=sub10UnitMgmtSyncE, sub10UnitMgmtSyncEMode=sub10UnitMgmtSyncEMode, sub10UnitMgmtActions=sub10UnitMgmtActions, sub10UnitMgmtTransaction=sub10UnitMgmtTransaction, sub10UnitMgmtTransactionStatus=sub10UnitMgmtTransactionStatus, sub10UnitMgmtRollbackTimeout=sub10UnitMgmtRollbackTimeout, sub10UnitMgmtTransactionMode=sub10UnitMgmtTransactionMode, sub10UnitMgmtResetAction=sub10UnitMgmtResetAction, sub10Ethernet=sub10Ethernet, sub10EthernetStatus=sub10EthernetStatus, sub10EthernetLocalStatus=sub10EthernetLocalStatus, sub10EthLclLinkStatus=sub10EthLclLinkStatus, sub10EthLclMacAddress=sub10EthLclMacAddress, sub10EthLclSpeed=sub10EthLclSpeed, sub10EthLclDuplex=sub10EthLclDuplex, sub10EthLclMDI=sub10EthLclMDI, sub10EthernetRemoteStatus=sub10EthernetRemoteStatus, sub10EthRmtLinkStatus=sub10EthRmtLinkStatus, sub10EthRmtMacAddress=sub10EthRmtMacAddress, sub10EthRmtSpeed=sub10EthRmtSpeed, sub10EthRmtDuplex=sub10EthRmtDuplex, sub10EthRmtMDI=sub10EthRmtMDI, sub10EthernetMgmt=sub10EthernetMgmt, sub10EthMgmtPhy=sub10EthMgmtPhy, sub10EthMgmtPhyAutoNeg=sub10EthMgmtPhyAutoNeg, sub10EthMgmtPhySpeed=sub10EthMgmtPhySpeed, sub10EthMgmtPhyDuplex=sub10EthMgmtPhyDuplex, sub10EthMgmtPhyMDI=sub10EthMgmtPhyMDI, sub10EthMgmtVlan=sub10EthMgmtVlan, sub10EthMgmtVlanFiltering=sub10EthMgmtVlanFiltering, sub10EthMgmtVlanDefaultEnabled=sub10EthMgmtVlanDefaultEnabled, sub10EthMgmtVlanDefaultId=sub10EthMgmtVlanDefaultId, sub10EthMgmtVlanDefaultPriority=sub10EthMgmtVlanDefaultPriority, sub10EthMgmtVlanDefaultDEI=sub10EthMgmtVlanDefaultDEI, sub10EthMgmtVlanIngressAction=sub10EthMgmtVlanIngressAction, sub10EthMgmtVlanEgressAction=sub10EthMgmtVlanEgressAction, sub10EthMgmtVlanAllowedTable=sub10EthMgmtVlanAllowedTable, sub10EthMgmtVlanAllowedEntry=sub10EthMgmtVlanAllowedEntry, sub10EthMgmtVlanAllowedIndex=sub10EthMgmtVlanAllowedIndex, sub10EthMgmtVlanAllowedRowStatus=sub10EthMgmtVlanAllowedRowStatus, sub10EthMgmtVlanAllowedId=sub10EthMgmtVlanAllowedId, sub10EthMgmtQoS=sub10EthMgmtQoS, sub10EthMgmtQoSState=sub10EthMgmtQoSState, sub10EthMgmtQoSMode=sub10EthMgmtQoSMode, sub10EthMgmtQoSUntaggedQueue=sub10EthMgmtQoSUntaggedQueue, sub10EthMgmtQoSQTable=sub10EthMgmtQoSQTable, sub10EthMgmtQoSQEntry=sub10EthMgmtQoSQEntry, sub10EthMgmtQoSQIndex=sub10EthMgmtQoSQIndex, sub10EthMgmtQoSQSchedulingType=sub10EthMgmtQoSQSchedulingType, sub10EthMgmtQoSQDWRRWeight=sub10EthMgmtQoSQDWRRWeight, sub10EthMgmtQoSQCongestionPolicy=sub10EthMgmtQoSQCongestionPolicy, sub10EthMgmtQoSQSizeMax=sub10EthMgmtQoSQSizeMax, sub10EthMgmtQoSQLen=sub10EthMgmtQoSQLen, sub10EthMgmtQoSVlanMappingNumber=sub10EthMgmtQoSVlanMappingNumber, sub10EthMgmtQoSVlanTable=sub10EthMgmtQoSVlanTable, sub10EthMgmtQoSVlanEntry=sub10EthMgmtQoSVlanEntry, sub10EthMgmtQoSVlanIndex=sub10EthMgmtQoSVlanIndex, sub10EthMgmtQoSVlanId=sub10EthMgmtQoSVlanId, sub10EthMgmtQoSVlanQueue=sub10EthMgmtQoSVlanQueue, sub10EthMgmtQoSPCPTable=sub10EthMgmtQoSPCPTable, sub10EthMgmtQoSPCPEntry=sub10EthMgmtQoSPCPEntry, sub10EthMgmtQoSPCPIndex=sub10EthMgmtQoSPCPIndex, sub10EthMgmtQoSPCPQueue=sub10EthMgmtQoSPCPQueue, sub10EthMgmtQoSDSCPMappingNumber=sub10EthMgmtQoSDSCPMappingNumber, sub10EthMgmtQoSDSCPTable=sub10EthMgmtQoSDSCPTable, sub10EthMgmtQoSDSCPEntry=sub10EthMgmtQoSDSCPEntry, sub10EthMgmtQoSDSCPIndex=sub10EthMgmtQoSDSCPIndex, sub10EthMgmtQoSDSCPMarking=sub10EthMgmtQoSDSCPMarking, sub10EthMgmtQoSDSCPQueue=sub10EthMgmtQoSDSCPQueue, sub10EthMgmtQoSMPLSMappingNumber=sub10EthMgmtQoSMPLSMappingNumber, sub10EthMgmtQoSMPLSTable=sub10EthMgmtQoSMPLSTable, sub10EthMgmtQoSMPLSEntry=sub10EthMgmtQoSMPLSEntry, sub10EthMgmtQoSMPLSIndex=sub10EthMgmtQoSMPLSIndex, sub10EthMgmtQoSMPLSTrafficClass=sub10EthMgmtQoSMPLSTrafficClass, sub10EthMgmtQoSMPLSQueue=sub10EthMgmtQoSMPLSQueue, sub10EthMgmtStats=sub10EthMgmtStats, sub10EthMgmtStatsActiveTable=sub10EthMgmtStatsActiveTable, sub10EthMgmtStatsActiveEntry=sub10EthMgmtStatsActiveEntry, sub10EthMgmtStatsActiveIndex=sub10EthMgmtStatsActiveIndex, sub10EthMgmtStatsActiveName=sub10EthMgmtStatsActiveName, sub10EthMgmtStatsActiveState=sub10EthMgmtStatsActiveState, sub10EthernetStats=sub10EthernetStats, sub10EthStatsTimeElapsed=sub10EthStatsTimeElapsed, sub10EthernetStatsCurrent=sub10EthernetStatsCurrent, sub10EthStatsCurrRxOctets=sub10EthStatsCurrRxOctets, sub10EthStatsCurrRxGoodFrms=sub10EthStatsCurrRxGoodFrms, sub10EthStatsCurrRxBcastFrms=sub10EthStatsCurrRxBcastFrms, sub10EthStatsCurrRxMcastFrms=sub10EthStatsCurrRxMcastFrms, sub10EthStatsCurrRxPauseFrms=sub10EthStatsCurrRxPauseFrms, sub10EthStatsCurrRxCRCErrs=sub10EthStatsCurrRxCRCErrs, sub10EthStatsCurrRxAlignErrs=sub10EthStatsCurrRxAlignErrs, sub10EthStatsCurrRxOversized=sub10EthStatsCurrRxOversized, sub10EthStatsCurrRxJabberFrms=sub10EthStatsCurrRxJabberFrms, sub10EthStatsCurrRxUndersized=sub10EthStatsCurrRxUndersized, sub10EthStatsCurrRxFragments=sub10EthStatsCurrRxFragments, sub10EthStatsCurrRxSOFOvrns=sub10EthStatsCurrRxSOFOvrns, sub10EthStatsCurrTxOctets=sub10EthStatsCurrTxOctets, sub10EthStatsCurrTxGoodFrms=sub10EthStatsCurrTxGoodFrms, sub10EthStatsCurrTxBcastFrms=sub10EthStatsCurrTxBcastFrms, sub10EthStatsCurrTxMcastFrms=sub10EthStatsCurrTxMcastFrms, sub10EthStatsCurrTxPauseFrms=sub10EthStatsCurrTxPauseFrms, sub10EthStatsCurrTxDeferred=sub10EthStatsCurrTxDeferred, sub10EthStatsCurrTxCollsn=sub10EthStatsCurrTxCollsn, sub10EthStatsCurrTxSnglCollsn=sub10EthStatsCurrTxSnglCollsn, sub10EthStatsCurrTxMlplCollsn=sub10EthStatsCurrTxMlplCollsn, sub10EthStatsCurrTxExsvCollsn=sub10EthStatsCurrTxExsvCollsn, sub10EthStatsCurrTxLtCollsn=sub10EthStatsCurrTxLtCollsn, sub10EthStatsCurrTxCSenseErrs=sub10EthStatsCurrTxCSenseErrs, sub10EthStatsCurrPkts64Octets=sub10EthStatsCurrPkts64Octets, sub10EthStatsCurrPkts65T127=sub10EthStatsCurrPkts65T127, sub10EthStatsCurrPkts128T255=sub10EthStatsCurrPkts128T255, sub10EthStatsCurrPkts256T511=sub10EthStatsCurrPkts256T511, sub10EthStatsCurrPkts512T1023=sub10EthStatsCurrPkts512T1023, sub10EthStatsCurrPkts1024TMax=sub10EthStatsCurrPkts1024TMax, sub10EthernetStatsHistory=sub10EthernetStatsHistory, sub10EthernetStats15mHistory=sub10EthernetStats15mHistory, sub10EthStats15mHistIntvls=sub10EthStats15mHistIntvls, sub10EthStats15mHistTable=sub10EthStats15mHistTable, sub10EthStats15mHistEntry=sub10EthStats15mHistEntry, sub10EthStats15mHistIntvl=sub10EthStats15mHistIntvl, sub10EthStats15mHistTime=sub10EthStats15mHistTime, sub10EthStats15mHistRxOctets=sub10EthStats15mHistRxOctets, sub10EthStats15mHistRxGoodFrms=sub10EthStats15mHistRxGoodFrms, sub10EthStats15mHistRxBcastFrms=sub10EthStats15mHistRxBcastFrms, sub10EthStats15mHistRxMcastFrms=sub10EthStats15mHistRxMcastFrms, sub10EthStats15mHistRxPauseFrms=sub10EthStats15mHistRxPauseFrms)
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", sub10EthStats15mHistRxCRCErrs=sub10EthStats15mHistRxCRCErrs, sub10EthStats15mHistRxAlignErrs=sub10EthStats15mHistRxAlignErrs, sub10EthStats15mHistRxOversized=sub10EthStats15mHistRxOversized, sub10EthStats15mHistRxJabberFrms=sub10EthStats15mHistRxJabberFrms, sub10EthStats15mHistRxUndersized=sub10EthStats15mHistRxUndersized, sub10EthStats15mHistRxFragments=sub10EthStats15mHistRxFragments, sub10EthStats15mHistRxSOFOvrns=sub10EthStats15mHistRxSOFOvrns, sub10EthStats15mHistTxOctets=sub10EthStats15mHistTxOctets, sub10EthStats15mHistTxGoodFrms=sub10EthStats15mHistTxGoodFrms, sub10EthStats15mHistTxBcastFrms=sub10EthStats15mHistTxBcastFrms, sub10EthStats15mHistTxMcastFrms=sub10EthStats15mHistTxMcastFrms, sub10EthStats15mHistTxPauseFrms=sub10EthStats15mHistTxPauseFrms, sub10EthStats15mHistTxDeferred=sub10EthStats15mHistTxDeferred, sub10EthStats15mHistTxCollsn=sub10EthStats15mHistTxCollsn, sub10EthStats15mHistTxSnglCollsn=sub10EthStats15mHistTxSnglCollsn, sub10EthStats15mHistTxMlplCollsn=sub10EthStats15mHistTxMlplCollsn, sub10EthStats15mHistTxExsvCollsn=sub10EthStats15mHistTxExsvCollsn, sub10EthStats15mHistTxLtCollsn=sub10EthStats15mHistTxLtCollsn, sub10EthStats15mHistTxCSenseErrs=sub10EthStats15mHistTxCSenseErrs, sub10EthStats15mHistPkts64Octets=sub10EthStats15mHistPkts64Octets, sub10EthStats15mHistPkts65T127=sub10EthStats15mHistPkts65T127, sub10EthStats15mHistPkts128T255=sub10EthStats15mHistPkts128T255, sub10EthStats15mHistPkts256T511=sub10EthStats15mHistPkts256T511, sub10EthStats15mHistPkts512T1023=sub10EthStats15mHistPkts512T1023, sub10EthStats15mHistPkts1024TMax=sub10EthStats15mHistPkts1024TMax, sub10EthStats1dHistory=sub10EthStats1dHistory, sub10EthStats1dHistIntvls=sub10EthStats1dHistIntvls, sub10EthStats1dHistTable=sub10EthStats1dHistTable, sub10EthStats1dHistEntry=sub10EthStats1dHistEntry, sub10EthStats1dHistIntvl=sub10EthStats1dHistIntvl, sub10EthStats1dHistTime=sub10EthStats1dHistTime, sub10EthStats1dHistRxOctets=sub10EthStats1dHistRxOctets, sub10EthStats1dHistRxGoodFrms=sub10EthStats1dHistRxGoodFrms, sub10EthStats1dHistRxBcastFrms=sub10EthStats1dHistRxBcastFrms, sub10EthStats1dHistRxMcastFrms=sub10EthStats1dHistRxMcastFrms, sub10EthStats1dHistRxPauseFrms=sub10EthStats1dHistRxPauseFrms, sub10EthStats1dHistRxCRCErrs=sub10EthStats1dHistRxCRCErrs, sub10EthStats1dHistRxAlignErrs=sub10EthStats1dHistRxAlignErrs, sub10EthStats1dHistRxOversized=sub10EthStats1dHistRxOversized, sub10EthStats1dHistRxJabberFrms=sub10EthStats1dHistRxJabberFrms, sub10EthStats1dHistRxUndersized=sub10EthStats1dHistRxUndersized, sub10EthStats1dHistRxFragments=sub10EthStats1dHistRxFragments, sub10EthStats1dHistRxSOFOvrns=sub10EthStats1dHistRxSOFOvrns, sub10EthStats1dHistTxOctets=sub10EthStats1dHistTxOctets, sub10EthStats1dHistTxGoodFrms=sub10EthStats1dHistTxGoodFrms, sub10EthStats1dHistTxBcastFrms=sub10EthStats1dHistTxBcastFrms, sub10EthStats1dHistTxMcastFrms=sub10EthStats1dHistTxMcastFrms, sub10EthStats1dHistTxPauseFrms=sub10EthStats1dHistTxPauseFrms, sub10EthStats1dHistTxDeferred=sub10EthStats1dHistTxDeferred, sub10EthStats1dHistTxCollsn=sub10EthStats1dHistTxCollsn, sub10EthStats1dHistTxSnglCollsn=sub10EthStats1dHistTxSnglCollsn, sub10EthStats1dHistTxMlplCollsn=sub10EthStats1dHistTxMlplCollsn, sub10EthStats1dHistTxExsvCollsn=sub10EthStats1dHistTxExsvCollsn, sub10EthStats1dHistTxLtCollsn=sub10EthStats1dHistTxLtCollsn, sub10EthStats1dHistTxCSenseErrs=sub10EthStats1dHistTxCSenseErrs, sub10EthStats1dHistPkts64Octets=sub10EthStats1dHistPkts64Octets, sub10EthStats1dHistPkts65T127=sub10EthStats1dHistPkts65T127, sub10EthStats1dHistPkts128T255=sub10EthStats1dHistPkts128T255, sub10EthStats1dHistPkts256T511=sub10EthStats1dHistPkts256T511, sub10EthStats1dHistPkts512T1023=sub10EthStats1dHistPkts512T1023, sub10EthStats1dHistPkts1024TMax=sub10EthStats1dHistPkts1024TMax, sub10Radio=sub10Radio, sub10RadioStatus=sub10RadioStatus, sub10RadioLocalStatus=sub10RadioLocalStatus, sub10RadioLclLinkStatus=sub10RadioLclLinkStatus, sub10RadioLclTxPower=sub10RadioLclTxPower, sub10RadioLclRxPower=sub10RadioLclRxPower, sub10RadioLclVectErr=sub10RadioLclVectErr, sub10RadioLclLnkLoss=sub10RadioLclLnkLoss, sub10RadioLclAlignmentMode=sub10RadioLclAlignmentMode, sub10RadioLclDataRate=sub10RadioLclDataRate, sub10RadioLclMWUType=sub10RadioLclMWUType, sub10RadioRemoteStatus=sub10RadioRemoteStatus, sub10RadioRmtLinkStatus=sub10RadioRmtLinkStatus, sub10RadioRmtTxPower=sub10RadioRmtTxPower, sub10RadioRmtRxPower=sub10RadioRmtRxPower, sub10RadioRmtVectErr=sub10RadioRmtVectErr, sub10RadioRmtLnkLoss=sub10RadioRmtLnkLoss, sub10RadioRmtAlignmentMode=sub10RadioRmtAlignmentMode, sub10RadioMgmt=sub10RadioMgmt, sub10RadioMgmtTxPowerLimit=sub10RadioMgmtTxPowerLimit, sub10RadioMgmtTxRxFreq=sub10RadioMgmtTxRxFreq, sub10RadioMgmtAPCMode=sub10RadioMgmtAPCMode, sub10RadioMgmtModulationMode=sub10RadioMgmtModulationMode, sub10RadioMgmtAmod=sub10RadioMgmtAmod, sub10RadioMgmtAlignmentMode=sub10RadioMgmtAlignmentMode, sub10RadioMgmtMWUChannelWidth=sub10RadioMgmtMWUChannelWidth, sub10RadioMgmtStats=sub10RadioMgmtStats, sub10RadioMgmtStats1dPersist=sub10RadioMgmtStats1dPersist, sub10RadioMgmtStatsActiveTable=sub10RadioMgmtStatsActiveTable, sub10RadioMgmtStatsActiveEntry=sub10RadioMgmtStatsActiveEntry, sub10RadioMgmtStatsActiveIndex=sub10RadioMgmtStatsActiveIndex, sub10RadioMgmtStatsActiveName=sub10RadioMgmtStatsActiveName, sub10RadioMgmtStatsActiveState=sub10RadioMgmtStatsActiveState, sub10RadioStats=sub10RadioStats, sub10RadioStatsTimeElapsed=sub10RadioStatsTimeElapsed, sub10RadioStatsCurrent=sub10RadioStatsCurrent, sub10RadioStatsCurrTxPowerMin=sub10RadioStatsCurrTxPowerMin, sub10RadioStatsCurrTxPowerMax=sub10RadioStatsCurrTxPowerMax, sub10RadioStatsCurrTxPowerAvg=sub10RadioStatsCurrTxPowerAvg, sub10RadioStatsCurrRxPowerMin=sub10RadioStatsCurrRxPowerMin, sub10RadioStatsCurrRxPowerMax=sub10RadioStatsCurrRxPowerMax, sub10RadioStatsCurrRxPowerAvg=sub10RadioStatsCurrRxPowerAvg, sub10RadioStatsCurrVectErrMin=sub10RadioStatsCurrVectErrMin, sub10RadioStatsCurrVectErrMax=sub10RadioStatsCurrVectErrMax, sub10RadioStatsCurrVectErrAvg=sub10RadioStatsCurrVectErrAvg, sub10RadioStatsCurrLnkLossMin=sub10RadioStatsCurrLnkLossMin, sub10RadioStatsCurrLnkLossMax=sub10RadioStatsCurrLnkLossMax, sub10RadioStatsCurrLnkLossAvg=sub10RadioStatsCurrLnkLossAvg, sub10RadioStatsCurrRxFrms=sub10RadioStatsCurrRxFrms, sub10RadioStatsCurrTxFrms=sub10RadioStatsCurrTxFrms, sub10RadioStatsCurrRxPkts=sub10RadioStatsCurrRxPkts, sub10RadioStatsCurrTxPkts=sub10RadioStatsCurrTxPkts, sub10RadioStatsCurrRxMgmtPkts=sub10RadioStatsCurrRxMgmtPkts, sub10RadioStatsCurrTxMgmtPkts=sub10RadioStatsCurrTxMgmtPkts, sub10RadioStatsCurrRxBadFrms=sub10RadioStatsCurrRxBadFrms, sub10RadioStatsCurrES=sub10RadioStatsCurrES, sub10RadioStatsCurrSES=sub10RadioStatsCurrSES, sub10RadioStatsCurrBBE=sub10RadioStatsCurrBBE, sub10RadioStatsCurrUAS=sub10RadioStatsCurrUAS, sub10RadioStatsCurrMWUTempMin=sub10RadioStatsCurrMWUTempMin, sub10RadioStatsCurrMWUTempMax=sub10RadioStatsCurrMWUTempMax, sub10RadioStatsCurrMWUTempAvg=sub10RadioStatsCurrMWUTempAvg, sub10RadioStatsHistory=sub10RadioStatsHistory, sub10RadioStats1mHistory=sub10RadioStats1mHistory, sub10RadioStats1mHistIntvls=sub10RadioStats1mHistIntvls, sub10RadioStats1mHistTable=sub10RadioStats1mHistTable)
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", sub10RadioStats1mHistEntry=sub10RadioStats1mHistEntry, sub10RadioStats1mHistIntvl=sub10RadioStats1mHistIntvl, sub10RadioStats1mHistTime=sub10RadioStats1mHistTime, sub10RadioStats1mHistTxPowerMin=sub10RadioStats1mHistTxPowerMin, sub10RadioStats1mHistTxPowerMax=sub10RadioStats1mHistTxPowerMax, sub10RadioStats1mHistTxPowerAvg=sub10RadioStats1mHistTxPowerAvg, sub10RadioStats1mHistRxPowerMin=sub10RadioStats1mHistRxPowerMin, sub10RadioStats1mHistRxPowerMax=sub10RadioStats1mHistRxPowerMax, sub10RadioStats1mHistRxPowerAvg=sub10RadioStats1mHistRxPowerAvg, sub10RadioStats1mHistVectErrMin=sub10RadioStats1mHistVectErrMin, sub10RadioStats1mHistVectErrMax=sub10RadioStats1mHistVectErrMax, sub10RadioStats1mHistVectErrAvg=sub10RadioStats1mHistVectErrAvg, sub10RadioStats1mHistLnkLossMin=sub10RadioStats1mHistLnkLossMin, sub10RadioStats1mHistLnkLossMax=sub10RadioStats1mHistLnkLossMax, sub10RadioStats1mHistLnkLossAvg=sub10RadioStats1mHistLnkLossAvg, sub10RadioStats1mHistMWUTempMin=sub10RadioStats1mHistMWUTempMin, sub10RadioStats1mHistMWUTempMax=sub10RadioStats1mHistMWUTempMax, sub10RadioStats1mHistMWUTempAvg=sub10RadioStats1mHistMWUTempAvg, sub10RadioStats1mHistES=sub10RadioStats1mHistES, sub10RadioStats1mHistSES=sub10RadioStats1mHistSES, sub10RadioStats1mHistBBE=sub10RadioStats1mHistBBE, sub10RadioStats1mHistUAS=sub10RadioStats1mHistUAS, sub10RadioStats1mHistRxFrms=sub10RadioStats1mHistRxFrms, sub10RadioStats1mHistTxFrms=sub10RadioStats1mHistTxFrms, sub10RadioStats1mHistRxPkts=sub10RadioStats1mHistRxPkts, sub10RadioStats1mHistTxPkts=sub10RadioStats1mHistTxPkts, sub10RadioStats1mHistRxMgmtPkts=sub10RadioStats1mHistRxMgmtPkts, sub10RadioStats1mHistTxMgmtPkts=sub10RadioStats1mHistTxMgmtPkts, sub10RadioStats1mHistRxBadFrms=sub10RadioStats1mHistRxBadFrms, sub10RadioStats15mHistory=sub10RadioStats15mHistory, sub10RadioStats15mHistIntvls=sub10RadioStats15mHistIntvls, sub10RadioStats15mHistTable=sub10RadioStats15mHistTable, sub10RadioStats15mHistEntry=sub10RadioStats15mHistEntry, sub10RadioStats15mHistIntvl=sub10RadioStats15mHistIntvl, sub10RadioStats15mHistTime=sub10RadioStats15mHistTime, sub10RadioStats15mHistTxPowerMin=sub10RadioStats15mHistTxPowerMin, sub10RadioStats15mHistTxPowerMax=sub10RadioStats15mHistTxPowerMax, sub10RadioStats15mHistTxPowerAvg=sub10RadioStats15mHistTxPowerAvg, sub10RadioStats15mHistRxPowerMin=sub10RadioStats15mHistRxPowerMin, sub10RadioStats15mHistRxPowerMax=sub10RadioStats15mHistRxPowerMax, sub10RadioStats15mHistRxPowerAvg=sub10RadioStats15mHistRxPowerAvg, sub10RadioStats15mHistVectErrMin=sub10RadioStats15mHistVectErrMin, sub10RadioStats15mHistVectErrMax=sub10RadioStats15mHistVectErrMax, sub10RadioStats15mHistVectErrAvg=sub10RadioStats15mHistVectErrAvg, sub10RadioStats15mHistLnkLossMin=sub10RadioStats15mHistLnkLossMin, sub10RadioStats15mHistLnkLossMax=sub10RadioStats15mHistLnkLossMax, sub10RadioStats15mHistLnkLossAvg=sub10RadioStats15mHistLnkLossAvg, sub10RadioStats15mHistMWUTempMin=sub10RadioStats15mHistMWUTempMin, sub10RadioStats15mHistMWUTempMax=sub10RadioStats15mHistMWUTempMax, sub10RadioStats15mHistMWUTempAvg=sub10RadioStats15mHistMWUTempAvg, sub10RadioStats15mHistES=sub10RadioStats15mHistES, sub10RadioStats15mHistSES=sub10RadioStats15mHistSES, sub10RadioStats15mHistBBE=sub10RadioStats15mHistBBE, sub10RadioStats15mHistUAS=sub10RadioStats15mHistUAS, sub10RadioStats15mHistRxFrms=sub10RadioStats15mHistRxFrms, sub10RadioStats15mHistTxFrms=sub10RadioStats15mHistTxFrms, sub10RadioStats15mHistRxPkts=sub10RadioStats15mHistRxPkts, sub10RadioStats15mHistTxPkts=sub10RadioStats15mHistTxPkts, sub10RadioStats15mHistRxMgmtPkts=sub10RadioStats15mHistRxMgmtPkts, sub10RadioStats15mHistTxMgmtPkts=sub10RadioStats15mHistTxMgmtPkts, sub10RadioStats15mHistRxBadFrms=sub10RadioStats15mHistRxBadFrms, sub10RadioStats1dHistory=sub10RadioStats1dHistory, sub10RadioStats1dHistIntvls=sub10RadioStats1dHistIntvls, sub10RadioStats1dHistTable=sub10RadioStats1dHistTable, sub10RadioStats1dHistEntry=sub10RadioStats1dHistEntry, sub10RadioStats1dHistIntvl=sub10RadioStats1dHistIntvl, sub10RadioStats1dHistTime=sub10RadioStats1dHistTime, sub10RadioStats1dHistTxPowerMin=sub10RadioStats1dHistTxPowerMin, sub10RadioStats1dHistTxPowerMax=sub10RadioStats1dHistTxPowerMax, sub10RadioStats1dHistTxPowerAvg=sub10RadioStats1dHistTxPowerAvg, sub10RadioStats1dHistRxPowerMin=sub10RadioStats1dHistRxPowerMin, sub10RadioStats1dHistRxPowerMax=sub10RadioStats1dHistRxPowerMax, sub10RadioStats1dHistRxPowerAvg=sub10RadioStats1dHistRxPowerAvg, sub10RadioStats1dHistVectErrMin=sub10RadioStats1dHistVectErrMin, sub10RadioStats1dHistVectErrMax=sub10RadioStats1dHistVectErrMax, sub10RadioStats1dHistVectErrAvg=sub10RadioStats1dHistVectErrAvg, sub10RadioStats1dHistLnkLossMin=sub10RadioStats1dHistLnkLossMin, sub10RadioStats1dHistLnkLossMax=sub10RadioStats1dHistLnkLossMax, sub10RadioStats1dHistLnkLossAvg=sub10RadioStats1dHistLnkLossAvg, sub10RadioStats1dHistMWUTempMin=sub10RadioStats1dHistMWUTempMin, sub10RadioStats1dHistMWUTempMax=sub10RadioStats1dHistMWUTempMax, sub10RadioStats1dHistMWUTempAvg=sub10RadioStats1dHistMWUTempAvg, sub10RadioStats1dHistES=sub10RadioStats1dHistES, sub10RadioStats1dHistSES=sub10RadioStats1dHistSES, sub10RadioStats1dHistBBE=sub10RadioStats1dHistBBE, sub10RadioStats1dHistUAS=sub10RadioStats1dHistUAS, sub10RadioStats1dHistRxFrms=sub10RadioStats1dHistRxFrms, sub10RadioStats1dHistTxFrms=sub10RadioStats1dHistTxFrms, sub10RadioStats1dHistRxPkts=sub10RadioStats1dHistRxPkts, sub10RadioStats1dHistTxPkts=sub10RadioStats1dHistTxPkts, sub10RadioStats1dHistRxMgmtPkts=sub10RadioStats1dHistRxMgmtPkts, sub10RadioStats1dHistTxMgmtPkts=sub10RadioStats1dHistTxMgmtPkts, sub10RadioStats1dHistRxBadFrms=sub10RadioStats1dHistRxBadFrms, sub10MIBConformance=sub10MIBConformance, sub10MIBCompliances=sub10MIBCompliances, sub10MIBGroups=sub10MIBGroups)

# Notifications
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", sub10UnitAlarm=sub10UnitAlarm, sub10EthernetAlarm=sub10EthernetAlarm, sub10RadioAlarm=sub10RadioAlarm)

# Groups
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", sub10NotificationsGrp=sub10NotificationsGrp, sub10UnitLocalStatusGrp=sub10UnitLocalStatusGrp, sub10UnitLclAlarmStateEntryGrp=sub10UnitLclAlarmStateEntryGrp, sub10UnitRemoteStatusGrp=sub10UnitRemoteStatusGrp, sub10UnitMgmtSystemGrp=sub10UnitMgmtSystemGrp, sub10UnitMgmtIpGrp=sub10UnitMgmtIpGrp, sub10UnitMgmtVlanGrp=sub10UnitMgmtVlanGrp, sub10UnitMgmtUsersGrp=sub10UnitMgmtUsersGrp, sub10UnitMgmtUserEntryGrp=sub10UnitMgmtUserEntryGrp, sub10UnitMgmtTimeGrp=sub10UnitMgmtTimeGrp, sub10UnitMgmtAlarmEntryGrp=sub10UnitMgmtAlarmEntryGrp, sub10UnitMgmtSnmpGrp=sub10UnitMgmtSnmpGrp, sub10UnitMgmtSnmpTrpDstEntryGrp=sub10UnitMgmtSnmpTrpDstEntryGrp, sub10UnitMgmtFirmwareGrp=sub10UnitMgmtFirmwareGrp, sub10UnitMgmtFirmwareBankEntryGrp=sub10UnitMgmtFirmwareBankEntryGrp, sub10UnitMgmtDNSEntryGrp=sub10UnitMgmtDNSEntryGrp, sub10UnitMgmtEncryptionGrp=sub10UnitMgmtEncryptionGrp, sub10UnitMgmtLicenseGrp=sub10UnitMgmtLicenseGrp, sub10UnitMgmtSyncEGrp=sub10UnitMgmtSyncEGrp, sub10UnitMgmtActionsGrp=sub10UnitMgmtActionsGrp, sub10EthernetLocalStatusGrp=sub10EthernetLocalStatusGrp, sub10EthernetRemoteStatusGrp=sub10EthernetRemoteStatusGrp, sub10EthMgmtPhyGrp=sub10EthMgmtPhyGrp, sub10EthMgmtVlanGrp=sub10EthMgmtVlanGrp, sub10EthMgmtVlanAllowedEntryGrp=sub10EthMgmtVlanAllowedEntryGrp, sub10EthMgmtQoSGrp=sub10EthMgmtQoSGrp, sub10EthMgmtQoSQEntryGrp=sub10EthMgmtQoSQEntryGrp, sub10EthMgmtQoSVlanEntryGrp=sub10EthMgmtQoSVlanEntryGrp, sub10EthMgmtQoSPCPEntryGrp=sub10EthMgmtQoSPCPEntryGrp, sub10EthMgmtQoSDSCPEntryGrp=sub10EthMgmtQoSDSCPEntryGrp, sub10EthMgmtQoSMPLSEntryGrp=sub10EthMgmtQoSMPLSEntryGrp, sub10EthMgmtStatsActiveEntryGrp=sub10EthMgmtStatsActiveEntryGrp, sub10EthernetStatsGrp=sub10EthernetStatsGrp, sub10EthernetStatsCurrentGrp=sub10EthernetStatsCurrentGrp, sub10EthernetStats15mHistoryGrp=sub10EthernetStats15mHistoryGrp, sub10EthStats15mHistEntryGrp=sub10EthStats15mHistEntryGrp, sub10EthStats1dHistoryGrp=sub10EthStats1dHistoryGrp, sub10EthStats1dHistEntryGrp=sub10EthStats1dHistEntryGrp, sub10RadioLocalStatusGrp=sub10RadioLocalStatusGrp, sub10RadioRemoteStatusGrp=sub10RadioRemoteStatusGrp, sub10RadioMgmtGrp=sub10RadioMgmtGrp, sub10RadioMgmtStatsGrp=sub10RadioMgmtStatsGrp, sub10RadioMgmtStatsActiveEntryGrp=sub10RadioMgmtStatsActiveEntryGrp, sub10RadioStatsGrp=sub10RadioStatsGrp, sub10RadioStatsCurrentGrp=sub10RadioStatsCurrentGrp, sub10RadioStats1mHistoryGrp=sub10RadioStats1mHistoryGrp, sub10RadioStats1mHistEntryGrp=sub10RadioStats1mHistEntryGrp, sub10RadioStats15mHistoryGrp=sub10RadioStats15mHistoryGrp, sub10RadioStats15mHistEntryGrp=sub10RadioStats15mHistEntryGrp, sub10RadioStats1dHistoryGrp=sub10RadioStats1dHistoryGrp, sub10RadioStats1dHistEntryGrp=sub10RadioStats1dHistEntryGrp)

# Compliances
mibBuilder.exportSymbols("SUB10SYSTEMS-MIB", sub10Compliance=sub10Compliance)
