# PySNMP SMI module. Autogenerated from smidump -f python SUB10-MIB
# by libsmi2pysnmp-0.1.3 at Sat Mar 21 12:03:30 2015,
# Python version sys.version_info(major=2, minor=7, micro=9, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( MibScalar, MibTable, MibTableRow, MibTableColumn, ) = mibBuilder.importSymbols("RFC-1212", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
( enterprises, ) = mibBuilder.importSymbols("RFC1155-SMI", "enterprises")
( DisplayString, ) = mibBuilder.importSymbols("RFC1213-MIB", "DisplayString")
( Bits, Integer32, MibIdentifier, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "MibIdentifier", "TimeTicks")

# Objects

sub10 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0))
generalOFF = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 1))
generalOK = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 2))
generalWAR = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 3))
generalERR = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 4))
receiverLowAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 5))
receiverLowAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 6))
transmitterLowAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 7))
transmitterLowAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 8))
signalQualityAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 9))
signalQualityAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 10))
ber6EAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 11))
ber6EAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 12))
ber4EAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 13))
ber4EAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 14))
inputSupplyAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 15))
inputSupplyAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 16))
aisFromLineAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 17))
aisFromLineAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 18))
aisToLineAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 19))
aisToLineAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 20))
aisToPdhAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 21))
aisToPdhAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 22))
lossAtLineAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 23))
lossAtLineAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 24))
lossAtPdhAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 25))
lossAtPdhAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 26))
lossAtFrameAlarmOn = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 27))
lossAtFrameAlarmOff = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 0, 28))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1))
sub10RADIO_RELAY_LINK = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1)).setLabel("sub10RADIO-RELAY-LINK")
sub10StatusLED = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 1))
sub10EHW = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("error", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10EHW.setDescription("Hardware error.")
sub10ESR = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("error", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10ESR.setDescription("Signal error in radio.")
sub10ESL = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("error", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10ESL.setDescription("Signal error on lines.")
sub10CA = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10CA.setDescription("Non-standard command activate.")
local_station = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2)).setLabel("local-station")
sub10L_General = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 1)).setLabel("sub10L-General")
sub10LSupervisor = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,3,4,-1,2,5,)).subtype(namedValues=NamedValues(("offline", -1), ("none", 0), ("terminal", 1), ("local", 2), ("network", 3), ("service", 4), ("factory", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LSupervisor.setDescription("Active supervisor.")
sub10LConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,16,20,29,19,1,27,9,23,22,17,11,15,30,31,8,2,25,0,28,26,14,18,33,7,21,10,3,-1,24,32,12,13,)).subtype(namedValues=NamedValues(("offline", -1), ("undefined", 0), ("cf2xE1", 1), ("cf1xEthF-E1-1xE1", 10), ("cf1xEthF-E1-2xE1", 11), ("cf1xEthF-E1-3xE1", 12), ("cf1xEthF-E1-4xE1", 13), ("cf1xEthF-E1-5xE1", 14), ("cf1xEthF-E1-6xE1", 15), ("cf1xEthF-E1-7xE1", 16), ("cf1xEthF-E1-8xE1", 17), ("cf1xEthF", 18), ("cf1xEthF-1xE1", 19), ("cf4xE1", 2), ("cf1xEthF-2xE1", 20), ("cf1xEthF-3xE1", 21), ("cf1xEthF-4xE1", 22), ("cf1xEthF-5xE1", 23), ("cf1xEthF-6xE1", 24), ("cf1xEthF-7xE1", 25), ("cf1xEthF-8xE1", 26), ("cf2xFEth", 27), ("cf2xFEth-1xE1", 28), ("cf4xFEth-2xE1", 29), ("cf1xE2", 3), ("cf2xGEth", 30), ("cf2xGEth-SFP100", 31), ("cf2xGEth-SFP1000", 32), ("cf2xGEth-SFPSG", 33), ("cf1xE1-Ethernet", 4), ("cf1xE3-E1", 7), ("cf1xEthernet", 8), ("cf1xEthF-E1", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LConfiguration.setDescription("IDU configuration.")
sub10LStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,3,)).subtype(namedValues=NamedValues(("offline", 0), ("ok", 1), ("warning", 2), ("error", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LStatus.setDescription("Station alarm status.")
sub10LHistory = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LHistory.setDescription("History alarm status.")
sub10LIAISL = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LIAISL.setDescription("Automatic AIS ignored.")
sub10LILEVPWR = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILEVPWR.setDescription("Low RX or TX level alarms ignored.")
sub10L_ODU = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 2)).setLabel("sub10L-ODU")
sub10LRX_Level = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly").setLabel("sub10LRX-Level")
if mibBuilder.loadTexts: sub10LRX_Level.setDescription("Signal receiver level.")
sub10LTX_PWR = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly").setLabel("sub10LTX-PWR")
if mibBuilder.loadTexts: sub10LTX_PWR.setDescription("Transmitter power level.")
sub10LMode_TX = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("manual", 1), ("atpc", 2), ))).setMaxAccess("readonly").setLabel("sub10LMode-TX")
if mibBuilder.loadTexts: sub10LMode_TX.setDescription("Mode of power control.")
sub10LODU_LB = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly").setLabel("sub10LODU-LB")
if mibBuilder.loadTexts: sub10LODU_LB.setDescription("ODU line-loopback.")
sub10L_Modem = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 3)).setLabel("sub10L-Modem")
sub10LQuality = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("out", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LQuality.setDescription("Quality of 4-level modulation.")
sub10L_Supply = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 4)).setLabel("sub10L-Supply")
sub10LVoltage_5V = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 4, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("high", 1), ))).setMaxAccess("readonly").setLabel("sub10LVoltage-5V")
if mibBuilder.loadTexts: sub10LVoltage_5V.setDescription("Voltage 5V high.")
sub10LVoltage_5Vor15V = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 4, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly").setLabel("sub10LVoltage-5Vor15V")
if mibBuilder.loadTexts: sub10LVoltage_5Vor15V.setDescription("Voltage 5V or 15V low.")
sub10LVoltage_24V = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 4, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly").setLabel("sub10LVoltage-24V")
if mibBuilder.loadTexts: sub10LVoltage_24V.setDescription("Voltage 24V low.")
sub10LCurrent_ODU = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 4, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("out", 1), ))).setMaxAccess("readonly").setLabel("sub10LCurrent-ODU")
if mibBuilder.loadTexts: sub10LCurrent_ODU.setDescription("ODU current range.")
sub10LInput = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 4, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LInput.setDescription("Input voltage low.")
sub10L_IDU = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 5)).setLabel("sub10L-IDU")
sub10LEEPROM = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 5, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("bad", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LEEPROM.setDescription("EEPROM memory status.")
sub10LRAM = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 5, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("bad", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRAM.setDescription("RAM memory status.")
sub10LBattery = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 5, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LBattery.setDescription("RAM backup battery voltage.")
sub10LCommIDU = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 5, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("bad", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LCommIDU.setDescription("Communication status with blocks of IDU.")
sub10LCommRMT = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 5, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("error", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LCommRMT.setDescription("Communication status with remote station.")
sub10L_MUX = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 6)).setLabel("sub10L-MUX")
sub10LBER_10E6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly").setLabel("sub10LBER-10E6")
if mibBuilder.loadTexts: sub10LBER_10E6.setDescription("BER > 10E-6.")
sub10LBER_10E4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly").setLabel("sub10LBER-10E4")
if mibBuilder.loadTexts: sub10LBER_10E4.setDescription("BER > 10E-4.")
sub10LFrame = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 6, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("loss", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LFrame.setDescription("Frame LOSS.")
sub10L_PDH1 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 7)).setLabel("sub10L-PDH1")
sub10LPDHFrame = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 7, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("loss", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LPDHFrame.setDescription("PDH1 frame LOSS.")
sub10LAISPDH = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 7, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISPDH.setDescription("AIS to PDH1 frame.")
sub10LLLBPDH = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 7, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLBPDH.setDescription("Line loopback on PDH1 frame.")
sub10LRLBPDH = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 7, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLBPDH.setDescription("Radio loopback on PDH1 frame.")
sub10L_Line1 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 9)).setLabel("sub10L-Line1")
sub10LOSS1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 9, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LOSS1.setDescription("LOSS on line 1.")
sub10ILOSS1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 9, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10ILOSS1.setDescription("Ignore LOSS on line 1.")
sub10AIS1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 9, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10AIS1.setDescription("AIS to line 1.")
sub10AISL1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 9, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10AISL1.setDescription("AIS from line 1.")
sub10LLB1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 9, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLB1.setDescription("Line loopback on line 1.")
sub10RLB1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 9, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLB1.setDescription("Radio loopback on line 1.")
sub10L_Line2 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 10)).setLabel("sub10L-Line2")
sub10LLOSS2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 10, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS2.setDescription("LOSS on line 2.")
sub10LILOSS2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 10, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS2.setDescription("Ignore LOSS on line 2.")
sub10LAIS2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 10, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS2.setDescription("AIS to line 2.")
sub10LAISL2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 10, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL2.setDescription("AIS from line 2.")
sub10LLLB2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 10, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB2.setDescription("Line loopback on line 2.")
sub10LRLB2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 10, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB2.setDescription("Radio loopback on line 2.")
sub10L_Line3 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 11)).setLabel("sub10L-Line3")
sub10LLOSS3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 11, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS3.setDescription("LOSS on line 3.")
sub10LILOSS3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 11, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS3.setDescription("Ignore LOSS on line 3.")
sub10LAIS3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 11, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS3.setDescription("AIS to line 3.")
sub10LAISL3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 11, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL3.setDescription("AIS from line 3.")
sub10LLLB3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 11, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB3.setDescription("Line loopback on line 3.")
sub10LRLB3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 11, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB3.setDescription("Radio loopback on line 3.")
sub10L_Line4 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 12)).setLabel("sub10L-Line4")
sub10LLOSS4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 12, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS4.setDescription("LOSS on line 4.")
sub10LILOSS4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 12, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS4.setDescription("Ignore LOSS on line 4.")
sub10LAIS4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 12, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS4.setDescription("AIS to line 4.")
sub10LAISL4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 12, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL4.setDescription("AIS from line 4.")
sub10LLLB4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 12, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB4.setDescription("Line loopback on line 4.")
sub10LRLB4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 12, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB4.setDescription("Radio loopback on line 4.")
sub10L_Line5 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 13)).setLabel("sub10L-Line5")
sub10LLOSS5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 13, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS5.setDescription("LOSS on line 5.")
sub10LILOSS5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 13, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS5.setDescription("Ignore LOSS on line 5.")
sub10LAIS5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 13, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS5.setDescription("AIS to line 5.")
sub10LAISL5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 13, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL5.setDescription("AIS from line 5.")
sub10LLLB5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 13, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB5.setDescription("Line loopback on line 5.")
sub10LRLB5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 13, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB5.setDescription("Radio loopback on line 5.")
sub10L_Line6 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 14)).setLabel("sub10L-Line6")
sub10LLOSS6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 14, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS6.setDescription("LOSS on line 6.")
sub10LILOSS6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 14, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS6.setDescription("Ignore LOSS on line 6.")
sub10LAIS6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 14, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS6.setDescription("AIS to line 6.")
sub10LAISL6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 14, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL6.setDescription("AIS from line 6.")
sub10LLLB6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 14, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB6.setDescription("Line loopback on line 6.")
sub10LRLB6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 14, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB6.setDescription("Radio loopback on line 6.")
sub10L_Line7 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 15)).setLabel("sub10L-Line7")
sub10LLOSS7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 15, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS7.setDescription("LOSS on line 7.")
sub10LILOSS7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 15, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS7.setDescription("Ignore LOSS on line 7.")
sub10LAIS7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 15, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS7.setDescription("AIS to line 7.")
sub10LAISL7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 15, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL7.setDescription("AIS from line 7.")
sub10LLLB7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 15, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB7.setDescription("Line loopback on line 7.")
sub10LRLB7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 15, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB7.setDescription("Radio loopback on line 7.")
sub10L_Line8 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 16)).setLabel("sub10L-Line8")
sub10LLOSS8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 16, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS8.setDescription("LOSS on line 8.")
sub10LILOSS8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 16, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS8.setDescription("Ignore LOSS on line 8.")
sub10LAIS8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 16, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS8.setDescription("AIS to line 8.")
sub10LAISL8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 16, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL8.setDescription("AIS from line 8.")
sub10LLLB8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 16, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB8.setDescription("Line loopback on line 8.")
sub10LRLB8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 16, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB8.setDescription("Radio loopback on line 8.")
sub10L_Line9 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 17)).setLabel("sub10L-Line9")
sub10LLOSS9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 17, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS9.setDescription("LOSS on line 9.")
sub10LILOSS9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 17, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS9.setDescription("Ignore LOSS on line 9.")
sub10LAIS9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 17, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS9.setDescription("AIS to line 9.")
sub10LAISL9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 17, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL9.setDescription("AIS from line 9.")
sub10LLLB9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 17, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB9.setDescription("Line loopback on line 9.")
sub10LRLB9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 17, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB9.setDescription("Radio loopback on line 9.")
sub10L_Line10 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 18)).setLabel("sub10L-Line10")
sub10LLOSS10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 18, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS10.setDescription("LOSS on line 10.")
sub10LILOSS10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 18, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS10.setDescription("Ignore LOSS on line 10.")
sub10LAIS10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 18, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS10.setDescription("AIS to line 10.")
sub10LAISL10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 18, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL10.setDescription("AIS from line 10.")
sub10LLLB10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 18, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB10.setDescription("Line loopback on line 10.")
sub10LRLB10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 18, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB10.setDescription("Radio loopback on line 10.")
sub10L_Line11 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 19)).setLabel("sub10L-Line11")
sub10LLOSS11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 19, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS11.setDescription("LOSS on line 11.")
sub10LILOSS11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 19, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS11.setDescription("Ignore LOSS on line 11.")
sub10LAIS11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 19, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS11.setDescription("AIS to line 11.")
sub10LAISL11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 19, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL11.setDescription("AIS from line 11.")
sub10LLLB11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 19, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB11.setDescription("Line loopback on line 11.")
sub10LRLB11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 19, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB11.setDescription("Radio loopback on line 11.")
sub10L_Line12 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 20)).setLabel("sub10L-Line12")
sub10LLOSS12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 20, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLOSS12.setDescription("LOSS on line 12.")
sub10LILOSS12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 20, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LILOSS12.setDescription("Ignore LOSS on line 12.")
sub10LAIS12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 20, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAIS12.setDescription("AIS to line 12.")
sub10LAISL12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 20, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LAISL12.setDescription("AIS from line 12.")
sub10LLLB12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 20, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LLLB12.setDescription("Line loopback on line 12.")
sub10LRLB12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 2, 20, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10LRLB12.setDescription("Radio loopback on line 12.")
remote_station = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3)).setLabel("remote-station")
sub10R_General = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 1)).setLabel("sub10R-General")
sub10RSupervisor = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,3,4,-1,2,5,)).subtype(namedValues=NamedValues(("offline", -1), ("none", 0), ("terminal", 1), ("local", 2), ("network", 3), ("service", 4), ("factory", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RSupervisor.setDescription("Active supervisor.")
sub10RConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,16,20,29,19,1,27,9,23,22,17,11,15,30,31,8,2,25,0,28,26,14,18,33,7,21,10,3,-1,24,32,12,13,)).subtype(namedValues=NamedValues(("offline", -1), ("undefined", 0), ("cf2xE1", 1), ("cf1xEthF-E1-1xE1", 10), ("cf1xEthF-E1-2xE1", 11), ("cf1xEthF-E1-3xE1", 12), ("cf1xEthF-E1-4xE1", 13), ("cf1xEthF-E1-5xE1", 14), ("cf1xEthF-E1-6xE1", 15), ("cf1xEthF-E1-7xE1", 16), ("cf1xEthF-E1-8xE1", 17), ("cf1xEthF", 18), ("cf1xEthF-1xE1", 19), ("cf4xE1", 2), ("cf1xEthF-2xE1", 20), ("cf1xEthF-3xE1", 21), ("cf1xEthF-4xE1", 22), ("cf1xEthF-5xE1", 23), ("cf1xEthF-6xE1", 24), ("cf1xEthF-7xE1", 25), ("cf1xEthF-8xE1", 26), ("cf2xFEth", 27), ("cf2xFEth-1xE1", 28), ("cf4xFEth-2xE1", 29), ("cf1xE2", 3), ("cf2xGEth", 30), ("cf2xGEth-SFP100", 31), ("cf2xGEth-SFP1000", 32), ("cf2xGEth-SFPSG", 33), ("cf1xE1-Ethernet", 4), ("cf1xE3-E1", 7), ("cf1xEthernet", 8), ("cf1xEthF-E1", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RConfiguration.setDescription("IDU configuration.")
sub10RStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,3,)).subtype(namedValues=NamedValues(("offline", 0), ("ok", 1), ("warning", 2), ("error", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RStatus.setDescription("Station alarm status.")
sub10RHistory = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RHistory.setDescription("History alarm status.")
sub10RIAISL = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RIAISL.setDescription("Automatic AIS ignored.")
sub10RILEVPWR = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILEVPWR.setDescription("Low RX or TX level alarms ignored.")
sub10R_ODU = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 2)).setLabel("sub10R-ODU")
sub10RRX_Level = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly").setLabel("sub10RRX-Level")
if mibBuilder.loadTexts: sub10RRX_Level.setDescription("Signal receiver level.")
sub10RTX_PWR = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly").setLabel("sub10RTX-PWR")
if mibBuilder.loadTexts: sub10RTX_PWR.setDescription("Transmitter power level.")
sub10RMode_TX = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("manual", 1), ("atpc", 2), ))).setMaxAccess("readonly").setLabel("sub10RMode-TX")
if mibBuilder.loadTexts: sub10RMode_TX.setDescription("Mode of power control.")
sub10RODU_LB = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly").setLabel("sub10RODU-LB")
if mibBuilder.loadTexts: sub10RODU_LB.setDescription("ODU line-loopback.")
sub10R_Modem = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 3)).setLabel("sub10R-Modem")
sub10RQuality = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 3, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("out", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RQuality.setDescription("Quality of 4-level modulation.")
sub10R_Supply = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 4)).setLabel("sub10R-Supply")
sub10RVoltage_5V = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 4, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("high", 1), ))).setMaxAccess("readonly").setLabel("sub10RVoltage-5V")
if mibBuilder.loadTexts: sub10RVoltage_5V.setDescription("Voltage 5V high.")
sub10RVoltage_5Vor15V = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 4, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly").setLabel("sub10RVoltage-5Vor15V")
if mibBuilder.loadTexts: sub10RVoltage_5Vor15V.setDescription("Voltage 5V or 15V low.")
sub10RVoltage_24V = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 4, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly").setLabel("sub10RVoltage-24V")
if mibBuilder.loadTexts: sub10RVoltage_24V.setDescription("Voltage 24V low.")
sub10RCurrent_ODU = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 4, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("out", 1), ))).setMaxAccess("readonly").setLabel("sub10RCurrent-ODU")
if mibBuilder.loadTexts: sub10RCurrent_ODU.setDescription("ODU current range.")
sub10RInput = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 4, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RInput.setDescription("Input voltage low.")
sub10R_IDU = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 5)).setLabel("sub10R-IDU")
sub10REEPROM = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 5, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("bad", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10REEPROM.setDescription("EEPROM memory status.")
sub10RRAM = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 5, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("bad", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRAM.setDescription("RAM memory status.")
sub10RBattery = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 5, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RBattery.setDescription("RAM backup battery voltage.")
sub10RCommIDU = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 5, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("bad", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RCommIDU.setDescription("Communication status with blocks of IDU.")
sub10RCommRMT = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 5, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("error", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RCommRMT.setDescription("Communication status with remote station.")
sub10R_MUX = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 6)).setLabel("sub10R-MUX")
sub10RBER_10E6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly").setLabel("sub10RBER-10E6")
if mibBuilder.loadTexts: sub10RBER_10E6.setDescription("BER > 10E-6.")
sub10RBER_10E4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly").setLabel("sub10RBER-10E4")
if mibBuilder.loadTexts: sub10RBER_10E4.setDescription("BER > 10E-4.")
sub10RFrame = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 6, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("loss", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RFrame.setDescription("Frame LOSS.")
sub10R_PDH1 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 7)).setLabel("sub10R-PDH1")
sub10RPDHFrame = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 7, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("loss", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RPDHFrame.setDescription("PDH1 frame LOSS.")
sub10RAISPDH = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 7, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISPDH.setDescription("AIS to frame PDH1.")
sub10RLLBPDH = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 7, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLBPDH.setDescription("Line loopback on PDH1 frame.")
sub10RRLBPDH = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 7, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLBPDH.setDescription("Radio loopback on PDH1 frame.")
sub10R_Line1 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 9)).setLabel("sub10R-Line1")
sub10RLOSS1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 9, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS1.setDescription("LOSS on line 1.")
sub10RILOSS1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 9, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS1.setDescription("Ignore LOSS on line 1.")
sub10RAIS1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 9, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS1.setDescription("AIS to line 1.")
sub10RAISL1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 9, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL1.setDescription("AIS from line 1.")
sub10RLLB1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 9, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB1.setDescription("Line loopback on line 1.")
sub10RRLB1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 9, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB1.setDescription("Radio loopback on line 1.")
sub10R_Line2 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 10)).setLabel("sub10R-Line2")
sub10RLOSS2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 10, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS2.setDescription("LOSS on line 2.")
sub10RILOSS2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 10, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS2.setDescription("Ignore LOSS on line 2.")
sub10RAIS2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 10, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS2.setDescription("AIS to line 2.")
sub10RAISL2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 10, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL2.setDescription("AIS from line 2.")
sub10RLLB2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 10, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB2.setDescription("Line loopback on line 2.")
sub10RRLB2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 10, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB2.setDescription("Radio loopback on line 2.")
sub10R_Line3 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 11)).setLabel("sub10R-Line3")
sub10RLOSS3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 11, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS3.setDescription("LOSS on line 3.")
sub10RILOSS3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 11, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS3.setDescription("Ignore LOSS on line 3.")
sub10RAIS3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 11, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS3.setDescription("AIS to line 3.")
sub10RAISL3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 11, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL3.setDescription("AIS from line 3.")
sub10RLLB3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 11, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB3.setDescription("Line loopback on line 3.")
sub10RRLB3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 11, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB3.setDescription("Radio loopback on line 3.")
sub10R_Line4 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 12)).setLabel("sub10R-Line4")
sub10RLOSS4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 12, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS4.setDescription("LOSS on line 4.")
sub10RILOSS4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 12, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS4.setDescription("Ignore LOSS on line 4.")
sub10RAIS4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 12, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS4.setDescription("AIS to line 4.")
sub10RAISL4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 12, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL4.setDescription("AIS from line 4.")
sub10RLLB4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 12, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB4.setDescription("Line loopback on line 4.")
sub10RRLB4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 12, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB4.setDescription("Radio loopback on line 4.")
sub10R_Line5 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 13)).setLabel("sub10R-Line5")
sub10RLOSS5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 13, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS5.setDescription("LOSS on line 5.")
sub10RILOSS5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 13, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS5.setDescription("Ignore LOSS on line 5.")
sub10RAIS5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 13, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS5.setDescription("AIS to line 5.")
sub10RAISL5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 13, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL5.setDescription("AIS from line 5.")
sub10RLLB5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 13, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB5.setDescription("Line loopback on line 5.")
sub10RRLB5 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 13, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB5.setDescription("Radio loopback on line 5.")
sub10R_Line6 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 14)).setLabel("sub10R-Line6")
sub10RLOSS6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 14, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS6.setDescription("LOSS on line 6.")
sub10RILOSS6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 14, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS6.setDescription("Ignore LOSS on line 6.")
sub10RAIS6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 14, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS6.setDescription("AIS to line 6.")
sub10RAISL6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 14, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL6.setDescription("AIS from line 6.")
sub10RLLB6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 14, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB6.setDescription("Line loopback on line 6.")
sub10RRLB6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 14, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB6.setDescription("Radio loopback on line 6.")
sub10R_Line7 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 15)).setLabel("sub10R-Line7")
sub10RLOSS7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 15, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS7.setDescription("LOSS on line 7.")
sub10RILOSS7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 15, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS7.setDescription("Ignore LOSS on line 7.")
sub10RAIS7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 15, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS7.setDescription("AIS to line 7.")
sub10RAISL7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 15, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL7.setDescription("AIS from line 7.")
sub10RLLB7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 15, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB7.setDescription("Line loopback on line 7.")
sub10RRLB7 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 15, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB7.setDescription("Radio loopback on line 7.")
sub10R_Line8 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 16)).setLabel("sub10R-Line8")
sub10RLOSS8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 16, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS8.setDescription("LOSS on line 8.")
sub10RILOSS8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 16, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS8.setDescription("Ignore LOSS on line 8.")
sub10RAIS8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 16, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS8.setDescription("AIS to line 8.")
sub10RAISL8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 16, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL8.setDescription("AIS from line 8.")
sub10RLLB8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 16, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB8.setDescription("Line loopback on line 8.")
sub10RRLB8 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 16, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB8.setDescription("Radio loopback on line 8.")
sub10R_Line9 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 17)).setLabel("sub10R-Line9")
sub10RLOSS9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 17, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS9.setDescription("LOSS on line 9.")
sub10RILOSS9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 17, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS9.setDescription("Ignore LOSS on line 9.")
sub10RAIS9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 17, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS9.setDescription("AIS to line 9.")
sub10RAISL9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 17, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL9.setDescription("AIS from line 9.")
sub10RLLB9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 17, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB9.setDescription("Line loopback on line 9.")
sub10RRLB9 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 17, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB9.setDescription("Radio loopback on line 9.")
sub10R_Line10 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 18)).setLabel("sub10R-Line10")
sub10RLOSS10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 18, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS10.setDescription("LOSS on line 10.")
sub10RILOSS10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 18, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS10.setDescription("Ignore LOSS on line 10.")
sub10RAIS10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 18, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS10.setDescription("AIS to line 10.")
sub10RAISL10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 18, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL10.setDescription("AIS from line 10.")
sub10RLLB10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 18, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB10.setDescription("Line loopback on line 10.")
sub10RRLB10 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 18, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB10.setDescription("Radio loopback on line 10.")
sub10R_Line11 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 19)).setLabel("sub10R-Line11")
sub10RLOSS11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 19, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS11.setDescription("LOSS on line 11.")
sub10RILOSS11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 19, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS11.setDescription("Ignore LOSS on line 11.")
sub10RAIS11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 19, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS11.setDescription("AIS to line 11.")
sub10RAISL11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 19, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL11.setDescription("AIS from line 11.")
sub10RLLB11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 19, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB11.setDescription("Line loopback on line 11.")
sub10RRLB11 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 19, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB11.setDescription("Radio loopback on line 11.")
sub10R_Line12 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 20)).setLabel("sub10R-Line12")
sub10RLOSS12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 20, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLOSS12.setDescription("LOSS on line 12.")
sub10RILOSS12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 20, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RILOSS12.setDescription("Ignore LOSS on line 12.")
sub10RAIS12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 20, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAIS12.setDescription("AIS to line 12.")
sub10RAISL12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 20, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RAISL12.setDescription("AIS from line 12.")
sub10RLLB12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 20, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RLLB12.setDescription("Line loopback on line 12.")
sub10RRLB12 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 3, 20, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10RRLB12.setDescription("Radio loopback on line 12.")
sub10RRLTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 1, 4))
sub10Last_Message = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 1, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly").setLabel("sub10Last-Message")
if mibBuilder.loadTexts: sub10Last_Message.setDescription("Message giving more detailed information on change of alarms status.")
sub10NMS = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 2))
trapParam = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 1, 2, 1))
nmsTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsTrapTime.setDescription("Time of alarms scan.")
trapSequence = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSequence.setDescription("Number of trap sequence.")
mwRouteID = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mwRouteID.setDescription("Identification of microwave route.")
stationID = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationID.setDescription("Identification of Radio Relay Link station.")
stationName = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationName.setDescription("Name of Radio Relay Link station.")
mgmtGWaddr = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtGWaddr.setDescription("IP address of Management Gateway.")
lineID = MibScalar((1, 3, 6, 1, 4, 1, 39003, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lineID.setDescription("Line ID number.")
sub10MP = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2))
sub10MPStatusLED = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 1))
sub10MPEHW = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 1, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("error", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPEHW.setDescription("Hardware error.")
sub10MPESR = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 1, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("error", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPESR.setDescription("Signal error in radio.")
sub10MPESL = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 1, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("error", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPESL.setDescription("Signal error on lines.")
sub10MPCA = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPCA.setDescription("Non-standard command activate.")
sub10MPGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 2))
sub10MPSupervisor = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 2, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,3,4,-1,2,5,)).subtype(namedValues=NamedValues(("offline", -1), ("none", 0), ("terminal", 1), ("local", 2), ("network", 3), ("service", 4), ("factory", 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPSupervisor.setDescription("Active supervisor.")
sub10MPConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 2, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(4,16,20,29,19,1,27,9,23,22,17,11,15,30,31,8,2,25,0,28,26,14,18,33,7,21,10,3,-1,24,32,12,13,)).subtype(namedValues=NamedValues(("offline", -1), ("undefined", 0), ("cf2xE1", 1), ("cf1xEthF-E1-1xE1", 10), ("cf1xEthF-E1-2xE1", 11), ("cf1xEthF-E1-3xE1", 12), ("cf1xEthF-E1-4xE1", 13), ("cf1xEthF-E1-5xE1", 14), ("cf1xEthF-E1-6xE1", 15), ("cf1xEthF-E1-7xE1", 16), ("cf1xEthF-E1-8xE1", 17), ("cf1xEthF", 18), ("cf1xEthF-1xE1", 19), ("cf4xE1", 2), ("cf1xEthF-2xE1", 20), ("cf1xEthF-3xE1", 21), ("cf1xEthF-4xE1", 22), ("cf1xEthF-5xE1", 23), ("cf1xEthF-6xE1", 24), ("cf1xEthF-7xE1", 25), ("cf1xEthF-8xE1", 26), ("cf2xFEth", 27), ("cf2xFEth-1xE1", 28), ("cf4xFEth-2xE1", 29), ("cf1xE2", 3), ("cf2xGEth", 30), ("cf2xGEth-SFP100", 31), ("cf2xGEth-SFP1000", 32), ("cf2xGEth-SFPSG", 33), ("cf1xE1-Ethernet", 4), ("cf1xE3-E1", 7), ("cf1xEthernet", 8), ("cf1xEthF-E1", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPConfiguration.setDescription("IDU configuration.")
sub10MPStatus = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 2, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,2,1,3,)).subtype(namedValues=NamedValues(("offline", 0), ("ok", 1), ("warning", 2), ("error", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPStatus.setDescription("Station alarm status.")
sub10MPHistory = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 2, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPHistory.setDescription("History alarm status.")
sub10MPIAISL = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 2, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPIAISL.setDescription("Automatic AIS ignored.")
sub10MPILEVPWR = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 2, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPILEVPWR.setDescription("Low RX or TX level alarms ignored.")
sub10MPODU = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 3))
sub10MPTuneTX = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPTuneTX.setDescription("Transmitter frequency [MHz].")
sub10MPTuneRX = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPTuneRX.setDescription("Receiver frequency [MHz].")
sub10MPTX_PWR = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 3, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(-128,)).subtype(namedValues=NamedValues(("offline", -128), ))).setMaxAccess("readonly").setLabel("sub10MPTX-PWR")
if mibBuilder.loadTexts: sub10MPTX_PWR.setDescription("Transmitter power level [dB].")
sub10MPRX_Level = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 3, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-128,)).subtype(namedValues=NamedValues(("offline", -128), ))).setMaxAccess("readonly").setLabel("sub10MPRX-Level")
if mibBuilder.loadTexts: sub10MPRX_Level.setDescription("Signal receiver level [dB].")
sub10MPTX_PWRAlrm = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 3, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("out", 1), ))).setMaxAccess("readonly").setLabel("sub10MPTX-PWRAlrm")
if mibBuilder.loadTexts: sub10MPTX_PWRAlrm.setDescription("Alarm transmitter power level.")
sub10MPRX_LevelAlrm = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 3, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly").setLabel("sub10MPRX-LevelAlrm")
if mibBuilder.loadTexts: sub10MPRX_LevelAlrm.setDescription("Alarm signal receiver level.")
sub10MPMode_TX = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 3, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(2,1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("manual", 1), ("atpc", 2), ))).setMaxAccess("readonly").setLabel("sub10MPMode-TX")
if mibBuilder.loadTexts: sub10MPMode_TX.setDescription("Mode of power control.")
sub10MPODU_LB = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 3, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly").setLabel("sub10MPODU-LB")
if mibBuilder.loadTexts: sub10MPODU_LB.setDescription("ODU line-loopback.")
sub10MPTemperature = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 3, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,)).subtype(namedValues=NamedValues(("offline", -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPTemperature.setDescription("Temperature ODU.")
sub10MPModem = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 4))
sub10MPQuality = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 4, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,)).subtype(namedValues=NamedValues(("offline", -1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPQuality.setDescription("Quality of signal.")
sub10MPSNR = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPSNR.setDescription("Signal noise ratio.")
sub10MPQualityAlrm = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 4, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("out", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPQualityAlrm.setDescription("Alarm quality of signal.")
sub10MPSNRAlrm = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 4, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPSNRAlrm.setDescription("Alarm signal noise ratio.")
sub10MPRate = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 4, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(28,8,16,14,20,30,7,23,24,6,2,25,5,13,22,27,17,15,34,31,18,32,26,21,11,19,3,0,12,33,-1,29,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ndef", 0), ("r4Mbps", 1), ("r16Mbps-r2", 11), ("r32Mbps2", 12), ("r40Mbps2", 13), ("r20Mbps2", 14), ("r10Mbps2", 15), ("r5Mbps2", 16), ("r60Mbps", 17), ("r30Mbps", 18), ("r16Mbps2", 19), ("r8Mbps1", 2), ("r8Mbps", 20), ("r80Mbps", 21), ("r40Mbps3", 22), ("r20Mbps3", 23), ("r10Mbps3", 24), ("r50Mbps", 25), ("r70Mbps", 26), ("r100Mbps", 27), ("r120Mbps", 28), ("r160Mbps", 29), ("r16Mbps1", 3), ("r170Mbps", 30), ("r75Mbps", 31), ("r35Mbps", 32), ("r25Mbps", 33), ("r165Mbps", 34), ("r40Mbps1", 5), ("r20Mbps1", 6), ("r10Mbps1", 7), ("r5Mbps1", 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPRate.setDescription("Transmision rate of link.")
sub10MPQAM = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 4, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(8,10,6,3,7,5,9,2,1,0,4,-1,11,)).subtype(namedValues=NamedValues(("offline", -1), ("ndef", 0), ("mp4FSK", 1), ("mp128QAM", 10), ("mp256QAM", 11), ("mpQPSK", 2), ("mp4QAM1", 3), ("mp8QAM", 4), ("mp16QAM1", 5), ("mp4QAM2", 6), ("mp16QAM2", 7), ("mp32QAM", 8), ("mp64QAM", 9), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPQAM.setDescription("Low transnission rate of link.")
sub10MPActiveACM = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 4, 7), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPActiveACM.setDescription("Activation ACM.")
sub10MPStatusACM = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 4, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("normal", 0), ("low", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPStatusACM.setDescription("Actual ACM status.")
sub10MPSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 5))
sub10MPInput = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 5, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("low", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPInput.setDescription("Input voltage low.")
sub10MPRDG = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 6))
sub10MPEEPROM = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 6, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("bad", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPEEPROM.setDescription("EEPROM memory status.")
sub10MPRAM = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 6, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("bad", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPRAM.setDescription("RAM memory status.")
sub10MPCommRMT = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 6, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("error", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPCommRMT.setDescription("Communication status with remote station.")
sub10MPMUX = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 7))
sub10MPBER = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPBER.setDescription("Value of BER.")
sub10MPBER_10E6 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 7, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly").setLabel("sub10MPBER-10E6")
if mibBuilder.loadTexts: sub10MPBER_10E6.setDescription("BER > 10E-6.")
sub10MPBER_10E4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 7, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("no", 0), ("yes", 1), ))).setMaxAccess("readonly").setLabel("sub10MPBER-10E4")
if mibBuilder.loadTexts: sub10MPBER_10E4.setDescription("BER > 10E-4.")
sub10MPFrame = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 7, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("ok", 0), ("loss", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPFrame.setDescription("Frame LOSS.")
sub10MPLine1 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 8))
sub10MPLOSS1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 8, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPLOSS1.setDescription("LOSS on line 1.")
sub10MPILOSS1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 8, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPILOSS1.setDescription("Ignore LOSS on line 1.")
sub10MPAIS1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 8, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPAIS1.setDescription("AIS to line 1.")
sub10MPAISL1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 8, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPAISL1.setDescription("AIS from line 1.")
sub10MPLLB1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 8, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPLLB1.setDescription("Line loopback on line 1.")
sub10MPRLB1 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 8, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPRLB1.setDescription("Radio loopback on line 1.")
sub10MPLine2 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 9))
sub10MPLOSS2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPLOSS2.setDescription("LOSS on line 2.")
sub10MPILOSS2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPILOSS2.setDescription("Ignore LOSS on line 2.")
sub10MPLink2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("down", 0), ("up", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPLink2.setDescription("Link status line 2.")
sub10MPSpeed2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("e10Mbps", 0), ("e100Mbps", 1), ("e1000Mbps", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPSpeed2.setDescription("Speed of line 2.")
sub10MPType2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("halfduplex", 0), ("fullduplex", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPType2.setDescription("Communication type of line 2.")
sub10MPFlow2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPFlow2.setDescription("Flow control of line 2.")
sub10MPPktRX2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPPktRX2.setDescription("Received packets count of line 2.")
sub10MPByteRX2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPByteRX2.setDescription("Received bytes count of line 2.")
sub10MPPktTX2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPPktTX2.setDescription("Transmitted packets count of line 2.")
sub10MPByteTX2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPByteTX2.setDescription("Transmitted bytes count of line 2.")
sub10MPError2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPError2.setDescription("Error count of line 2.")
sub10MPCollision2 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 9, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPCollision2.setDescription("Collision count of line 2.")
sub10MPLine3 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 10))
sub10MPLOSS3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPLOSS3.setDescription("LOSS on line 3.")
sub10MPILOSS3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPILOSS3.setDescription("Ignore LOSS on line 3.")
sub10MPLink3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("down", 0), ("up", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPLink3.setDescription("Link status line 3.")
sub10MPSpeed3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("e10Mbps", 0), ("e100Mbps", 1), ("e1000Mbps", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPSpeed3.setDescription("Speed of line 3.")
sub10MPType3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("halfduplex", 0), ("fullduplex", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPType3.setDescription("Communication type of line 3.")
sub10MPFlow3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPFlow3.setDescription("Flow control of line 3.")
sub10MPPktRX3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPPktRX3.setDescription("Received packets count of line 3.")
sub10MPByteRX3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPByteRX3.setDescription("Received bytes count of line 3.")
sub10MPPktTX3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPPktTX3.setDescription("Transmitted packets count of line 3.")
sub10MPByteTX3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPByteTX3.setDescription("Transmitted bytes count of line 3.")
sub10MPError3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPError3.setDescription("Error count of line 3.")
sub10MPCollision3 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 10, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPCollision3.setDescription("Collision count of line 3.")
sub10MPLine4 = MibIdentifier((1, 3, 6, 1, 4, 1, 39003, 2, 11))
sub10MPLOSS4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 1), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("not", 0), ("yes", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPLOSS4.setDescription("LOSS on line 4.")
sub10MPILOSS4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 2), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPILOSS4.setDescription("Ignore LOSS on line 4.")
sub10MPLink4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 3), Integer().subtype(subtypeSpec=SingleValueConstraint(0,-1,1,)).subtype(namedValues=NamedValues(("offline", -1), ("down", 0), ("up", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPLink4.setDescription("Link status line 4.")
sub10MPSpeed4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(2,-1,0,1,)).subtype(namedValues=NamedValues(("offline", -1), ("e10Mbps", 0), ("e100Mbps", 1), ("e1000Mbps", 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPSpeed4.setDescription("Speed of line 4.")
sub10MPType4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("halfduplex", 0), ("fullduplex", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPType4.setDescription("Communication type of line 4.")
sub10MPFlow4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(1,-1,0,)).subtype(namedValues=NamedValues(("offline", -1), ("off", 0), ("on", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPFlow4.setDescription("Flow control of line 4.")
sub10MPPktRX4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPPktRX4.setDescription("Received packets count of line 4.")
sub10MPByteRX4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPByteRX4.setDescription("Received bytes count of line 4.")
sub10MPPktTX4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPPktTX4.setDescription("Transmitted packets count of line 4.")
sub10MPByteTX4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPByteTX4.setDescription("Transmitted bytes count of line 4.")
sub10MPError4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPError4.setDescription("Error count of line 4.")
sub10MPCollision4 = MibScalar((1, 3, 6, 1, 4, 1, 39003, 2, 11, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sub10MPCollision4.setDescription("Collision count of line 4.")

# Augmentions

# Exports

# Objects
mibBuilder.exportSymbols("SUB10-MIB", sub10=sub10, traps=traps, generalOFF=generalOFF, generalOK=generalOK, generalWAR=generalWAR, generalERR=generalERR, receiverLowAlarmOn=receiverLowAlarmOn, receiverLowAlarmOff=receiverLowAlarmOff, transmitterLowAlarmOn=transmitterLowAlarmOn, transmitterLowAlarmOff=transmitterLowAlarmOff, signalQualityAlarmOn=signalQualityAlarmOn, signalQualityAlarmOff=signalQualityAlarmOff, ber6EAlarmOn=ber6EAlarmOn, ber6EAlarmOff=ber6EAlarmOff, ber4EAlarmOn=ber4EAlarmOn, ber4EAlarmOff=ber4EAlarmOff, inputSupplyAlarmOn=inputSupplyAlarmOn, inputSupplyAlarmOff=inputSupplyAlarmOff, aisFromLineAlarmOn=aisFromLineAlarmOn, aisFromLineAlarmOff=aisFromLineAlarmOff, aisToLineAlarmOn=aisToLineAlarmOn, aisToLineAlarmOff=aisToLineAlarmOff, aisToPdhAlarmOn=aisToPdhAlarmOn, aisToPdhAlarmOff=aisToPdhAlarmOff, lossAtLineAlarmOn=lossAtLineAlarmOn, lossAtLineAlarmOff=lossAtLineAlarmOff, lossAtPdhAlarmOn=lossAtPdhAlarmOn, lossAtPdhAlarmOff=lossAtPdhAlarmOff, lossAtFrameAlarmOn=lossAtFrameAlarmOn, lossAtFrameAlarmOff=lossAtFrameAlarmOff, products=products, sub10RADIO_RELAY_LINK=sub10RADIO_RELAY_LINK, sub10StatusLED=sub10StatusLED, sub10EHW=sub10EHW, sub10ESR=sub10ESR, sub10ESL=sub10ESL, sub10CA=sub10CA, local_station=local_station, sub10L_General=sub10L_General, sub10LSupervisor=sub10LSupervisor, sub10LConfiguration=sub10LConfiguration, sub10LStatus=sub10LStatus, sub10LHistory=sub10LHistory, sub10LIAISL=sub10LIAISL, sub10LILEVPWR=sub10LILEVPWR, sub10L_ODU=sub10L_ODU, sub10LRX_Level=sub10LRX_Level, sub10LTX_PWR=sub10LTX_PWR, sub10LMode_TX=sub10LMode_TX, sub10LODU_LB=sub10LODU_LB, sub10L_Modem=sub10L_Modem, sub10LQuality=sub10LQuality, sub10L_Supply=sub10L_Supply, sub10LVoltage_5V=sub10LVoltage_5V, sub10LVoltage_5Vor15V=sub10LVoltage_5Vor15V, sub10LVoltage_24V=sub10LVoltage_24V, sub10LCurrent_ODU=sub10LCurrent_ODU, sub10LInput=sub10LInput, sub10L_IDU=sub10L_IDU, sub10LEEPROM=sub10LEEPROM, sub10LRAM=sub10LRAM, sub10LBattery=sub10LBattery, sub10LCommIDU=sub10LCommIDU, sub10LCommRMT=sub10LCommRMT, sub10L_MUX=sub10L_MUX, sub10LBER_10E6=sub10LBER_10E6, sub10LBER_10E4=sub10LBER_10E4, sub10LFrame=sub10LFrame, sub10L_PDH1=sub10L_PDH1, sub10LPDHFrame=sub10LPDHFrame, sub10LAISPDH=sub10LAISPDH, sub10LLLBPDH=sub10LLLBPDH, sub10LRLBPDH=sub10LRLBPDH, sub10L_Line1=sub10L_Line1, sub10LOSS1=sub10LOSS1, sub10ILOSS1=sub10ILOSS1, sub10AIS1=sub10AIS1, sub10AISL1=sub10AISL1, sub10LLB1=sub10LLB1, sub10RLB1=sub10RLB1, sub10L_Line2=sub10L_Line2, sub10LLOSS2=sub10LLOSS2, sub10LILOSS2=sub10LILOSS2, sub10LAIS2=sub10LAIS2, sub10LAISL2=sub10LAISL2, sub10LLLB2=sub10LLLB2, sub10LRLB2=sub10LRLB2, sub10L_Line3=sub10L_Line3, sub10LLOSS3=sub10LLOSS3, sub10LILOSS3=sub10LILOSS3, sub10LAIS3=sub10LAIS3, sub10LAISL3=sub10LAISL3, sub10LLLB3=sub10LLLB3, sub10LRLB3=sub10LRLB3, sub10L_Line4=sub10L_Line4, sub10LLOSS4=sub10LLOSS4, sub10LILOSS4=sub10LILOSS4, sub10LAIS4=sub10LAIS4, sub10LAISL4=sub10LAISL4, sub10LLLB4=sub10LLLB4, sub10LRLB4=sub10LRLB4, sub10L_Line5=sub10L_Line5, sub10LLOSS5=sub10LLOSS5, sub10LILOSS5=sub10LILOSS5, sub10LAIS5=sub10LAIS5, sub10LAISL5=sub10LAISL5, sub10LLLB5=sub10LLLB5, sub10LRLB5=sub10LRLB5, sub10L_Line6=sub10L_Line6, sub10LLOSS6=sub10LLOSS6, sub10LILOSS6=sub10LILOSS6, sub10LAIS6=sub10LAIS6, sub10LAISL6=sub10LAISL6, sub10LLLB6=sub10LLLB6, sub10LRLB6=sub10LRLB6, sub10L_Line7=sub10L_Line7, sub10LLOSS7=sub10LLOSS7, sub10LILOSS7=sub10LILOSS7, sub10LAIS7=sub10LAIS7, sub10LAISL7=sub10LAISL7, sub10LLLB7=sub10LLLB7, sub10LRLB7=sub10LRLB7, sub10L_Line8=sub10L_Line8, sub10LLOSS8=sub10LLOSS8, sub10LILOSS8=sub10LILOSS8, sub10LAIS8=sub10LAIS8)
mibBuilder.exportSymbols("SUB10-MIB", sub10LAISL8=sub10LAISL8, sub10LLLB8=sub10LLLB8, sub10LRLB8=sub10LRLB8, sub10L_Line9=sub10L_Line9, sub10LLOSS9=sub10LLOSS9, sub10LILOSS9=sub10LILOSS9, sub10LAIS9=sub10LAIS9, sub10LAISL9=sub10LAISL9, sub10LLLB9=sub10LLLB9, sub10LRLB9=sub10LRLB9, sub10L_Line10=sub10L_Line10, sub10LLOSS10=sub10LLOSS10, sub10LILOSS10=sub10LILOSS10, sub10LAIS10=sub10LAIS10, sub10LAISL10=sub10LAISL10, sub10LLLB10=sub10LLLB10, sub10LRLB10=sub10LRLB10, sub10L_Line11=sub10L_Line11, sub10LLOSS11=sub10LLOSS11, sub10LILOSS11=sub10LILOSS11, sub10LAIS11=sub10LAIS11, sub10LAISL11=sub10LAISL11, sub10LLLB11=sub10LLLB11, sub10LRLB11=sub10LRLB11, sub10L_Line12=sub10L_Line12, sub10LLOSS12=sub10LLOSS12, sub10LILOSS12=sub10LILOSS12, sub10LAIS12=sub10LAIS12, sub10LAISL12=sub10LAISL12, sub10LLLB12=sub10LLLB12, sub10LRLB12=sub10LRLB12, remote_station=remote_station, sub10R_General=sub10R_General, sub10RSupervisor=sub10RSupervisor, sub10RConfiguration=sub10RConfiguration, sub10RStatus=sub10RStatus, sub10RHistory=sub10RHistory, sub10RIAISL=sub10RIAISL, sub10RILEVPWR=sub10RILEVPWR, sub10R_ODU=sub10R_ODU, sub10RRX_Level=sub10RRX_Level, sub10RTX_PWR=sub10RTX_PWR, sub10RMode_TX=sub10RMode_TX, sub10RODU_LB=sub10RODU_LB, sub10R_Modem=sub10R_Modem, sub10RQuality=sub10RQuality, sub10R_Supply=sub10R_Supply, sub10RVoltage_5V=sub10RVoltage_5V, sub10RVoltage_5Vor15V=sub10RVoltage_5Vor15V, sub10RVoltage_24V=sub10RVoltage_24V, sub10RCurrent_ODU=sub10RCurrent_ODU, sub10RInput=sub10RInput, sub10R_IDU=sub10R_IDU, sub10REEPROM=sub10REEPROM, sub10RRAM=sub10RRAM, sub10RBattery=sub10RBattery, sub10RCommIDU=sub10RCommIDU, sub10RCommRMT=sub10RCommRMT, sub10R_MUX=sub10R_MUX, sub10RBER_10E6=sub10RBER_10E6, sub10RBER_10E4=sub10RBER_10E4, sub10RFrame=sub10RFrame, sub10R_PDH1=sub10R_PDH1, sub10RPDHFrame=sub10RPDHFrame, sub10RAISPDH=sub10RAISPDH, sub10RLLBPDH=sub10RLLBPDH, sub10RRLBPDH=sub10RRLBPDH, sub10R_Line1=sub10R_Line1, sub10RLOSS1=sub10RLOSS1, sub10RILOSS1=sub10RILOSS1, sub10RAIS1=sub10RAIS1, sub10RAISL1=sub10RAISL1, sub10RLLB1=sub10RLLB1, sub10RRLB1=sub10RRLB1, sub10R_Line2=sub10R_Line2, sub10RLOSS2=sub10RLOSS2, sub10RILOSS2=sub10RILOSS2, sub10RAIS2=sub10RAIS2, sub10RAISL2=sub10RAISL2, sub10RLLB2=sub10RLLB2, sub10RRLB2=sub10RRLB2, sub10R_Line3=sub10R_Line3, sub10RLOSS3=sub10RLOSS3, sub10RILOSS3=sub10RILOSS3, sub10RAIS3=sub10RAIS3, sub10RAISL3=sub10RAISL3, sub10RLLB3=sub10RLLB3, sub10RRLB3=sub10RRLB3, sub10R_Line4=sub10R_Line4, sub10RLOSS4=sub10RLOSS4, sub10RILOSS4=sub10RILOSS4, sub10RAIS4=sub10RAIS4, sub10RAISL4=sub10RAISL4, sub10RLLB4=sub10RLLB4, sub10RRLB4=sub10RRLB4, sub10R_Line5=sub10R_Line5, sub10RLOSS5=sub10RLOSS5, sub10RILOSS5=sub10RILOSS5, sub10RAIS5=sub10RAIS5, sub10RAISL5=sub10RAISL5, sub10RLLB5=sub10RLLB5, sub10RRLB5=sub10RRLB5, sub10R_Line6=sub10R_Line6, sub10RLOSS6=sub10RLOSS6, sub10RILOSS6=sub10RILOSS6, sub10RAIS6=sub10RAIS6, sub10RAISL6=sub10RAISL6, sub10RLLB6=sub10RLLB6, sub10RRLB6=sub10RRLB6, sub10R_Line7=sub10R_Line7, sub10RLOSS7=sub10RLOSS7, sub10RILOSS7=sub10RILOSS7, sub10RAIS7=sub10RAIS7, sub10RAISL7=sub10RAISL7, sub10RLLB7=sub10RLLB7, sub10RRLB7=sub10RRLB7, sub10R_Line8=sub10R_Line8, sub10RLOSS8=sub10RLOSS8, sub10RILOSS8=sub10RILOSS8, sub10RAIS8=sub10RAIS8, sub10RAISL8=sub10RAISL8, sub10RLLB8=sub10RLLB8, sub10RRLB8=sub10RRLB8, sub10R_Line9=sub10R_Line9, sub10RLOSS9=sub10RLOSS9, sub10RILOSS9=sub10RILOSS9, sub10RAIS9=sub10RAIS9)
mibBuilder.exportSymbols("SUB10-MIB", sub10RAISL9=sub10RAISL9, sub10RLLB9=sub10RLLB9, sub10RRLB9=sub10RRLB9, sub10R_Line10=sub10R_Line10, sub10RLOSS10=sub10RLOSS10, sub10RILOSS10=sub10RILOSS10, sub10RAIS10=sub10RAIS10, sub10RAISL10=sub10RAISL10, sub10RLLB10=sub10RLLB10, sub10RRLB10=sub10RRLB10, sub10R_Line11=sub10R_Line11, sub10RLOSS11=sub10RLOSS11, sub10RILOSS11=sub10RILOSS11, sub10RAIS11=sub10RAIS11, sub10RAISL11=sub10RAISL11, sub10RLLB11=sub10RLLB11, sub10RRLB11=sub10RRLB11, sub10R_Line12=sub10R_Line12, sub10RLOSS12=sub10RLOSS12, sub10RILOSS12=sub10RILOSS12, sub10RAIS12=sub10RAIS12, sub10RAISL12=sub10RAISL12, sub10RLLB12=sub10RLLB12, sub10RRLB12=sub10RRLB12, sub10RRLTrap=sub10RRLTrap, sub10Last_Message=sub10Last_Message, sub10NMS=sub10NMS, trapParam=trapParam, nmsTrapTime=nmsTrapTime, trapSequence=trapSequence, mwRouteID=mwRouteID, stationID=stationID, stationName=stationName, mgmtGWaddr=mgmtGWaddr, lineID=lineID, sub10MP=sub10MP, sub10MPStatusLED=sub10MPStatusLED, sub10MPEHW=sub10MPEHW, sub10MPESR=sub10MPESR, sub10MPESL=sub10MPESL, sub10MPCA=sub10MPCA, sub10MPGeneral=sub10MPGeneral, sub10MPSupervisor=sub10MPSupervisor, sub10MPConfiguration=sub10MPConfiguration, sub10MPStatus=sub10MPStatus, sub10MPHistory=sub10MPHistory, sub10MPIAISL=sub10MPIAISL, sub10MPILEVPWR=sub10MPILEVPWR, sub10MPODU=sub10MPODU, sub10MPTuneTX=sub10MPTuneTX, sub10MPTuneRX=sub10MPTuneRX, sub10MPTX_PWR=sub10MPTX_PWR, sub10MPRX_Level=sub10MPRX_Level, sub10MPTX_PWRAlrm=sub10MPTX_PWRAlrm, sub10MPRX_LevelAlrm=sub10MPRX_LevelAlrm, sub10MPMode_TX=sub10MPMode_TX, sub10MPODU_LB=sub10MPODU_LB, sub10MPTemperature=sub10MPTemperature, sub10MPModem=sub10MPModem, sub10MPQuality=sub10MPQuality, sub10MPSNR=sub10MPSNR, sub10MPQualityAlrm=sub10MPQualityAlrm, sub10MPSNRAlrm=sub10MPSNRAlrm, sub10MPRate=sub10MPRate, sub10MPQAM=sub10MPQAM, sub10MPActiveACM=sub10MPActiveACM, sub10MPStatusACM=sub10MPStatusACM, sub10MPSupply=sub10MPSupply, sub10MPInput=sub10MPInput, sub10MPRDG=sub10MPRDG, sub10MPEEPROM=sub10MPEEPROM, sub10MPRAM=sub10MPRAM, sub10MPCommRMT=sub10MPCommRMT, sub10MPMUX=sub10MPMUX, sub10MPBER=sub10MPBER, sub10MPBER_10E6=sub10MPBER_10E6, sub10MPBER_10E4=sub10MPBER_10E4, sub10MPFrame=sub10MPFrame, sub10MPLine1=sub10MPLine1, sub10MPLOSS1=sub10MPLOSS1, sub10MPILOSS1=sub10MPILOSS1, sub10MPAIS1=sub10MPAIS1, sub10MPAISL1=sub10MPAISL1, sub10MPLLB1=sub10MPLLB1, sub10MPRLB1=sub10MPRLB1, sub10MPLine2=sub10MPLine2, sub10MPLOSS2=sub10MPLOSS2, sub10MPILOSS2=sub10MPILOSS2, sub10MPLink2=sub10MPLink2, sub10MPSpeed2=sub10MPSpeed2, sub10MPType2=sub10MPType2, sub10MPFlow2=sub10MPFlow2, sub10MPPktRX2=sub10MPPktRX2, sub10MPByteRX2=sub10MPByteRX2, sub10MPPktTX2=sub10MPPktTX2, sub10MPByteTX2=sub10MPByteTX2, sub10MPError2=sub10MPError2, sub10MPCollision2=sub10MPCollision2, sub10MPLine3=sub10MPLine3, sub10MPLOSS3=sub10MPLOSS3, sub10MPILOSS3=sub10MPILOSS3, sub10MPLink3=sub10MPLink3, sub10MPSpeed3=sub10MPSpeed3, sub10MPType3=sub10MPType3, sub10MPFlow3=sub10MPFlow3, sub10MPPktRX3=sub10MPPktRX3, sub10MPByteRX3=sub10MPByteRX3, sub10MPPktTX3=sub10MPPktTX3, sub10MPByteTX3=sub10MPByteTX3, sub10MPError3=sub10MPError3, sub10MPCollision3=sub10MPCollision3, sub10MPLine4=sub10MPLine4, sub10MPLOSS4=sub10MPLOSS4, sub10MPILOSS4=sub10MPILOSS4, sub10MPLink4=sub10MPLink4, sub10MPSpeed4=sub10MPSpeed4, sub10MPType4=sub10MPType4, sub10MPFlow4=sub10MPFlow4, sub10MPPktRX4=sub10MPPktRX4, sub10MPByteRX4=sub10MPByteRX4, sub10MPPktTX4=sub10MPPktTX4, sub10MPByteTX4=sub10MPByteTX4, sub10MPError4=sub10MPError4, sub10MPCollision4=sub10MPCollision4)

